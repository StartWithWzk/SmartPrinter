package com.qg.smartprinter;

import com.qg.smartprinter.localorder.GlobalEventManager;
import com.qg.smartprinter.localorder.OrderManager;
import com.qg.smartprinter.localorder.PrinterService;
import com.qg.smartprinter.logic.model.User;
import com.qg.smartprinter.util.SharedPreferencesUtils;

public class Application extends android.app.Application {

    private static Application sInstance = null;

    private User mUser;

    @Override
    public void onCreate() {
        super.onCreate();
        sInstance = this;
        PrinterService.start(this);

        SharedPreferencesUtils spu = SharedPreferencesUtils.getInstance();

        spu.init(getApplicationContext(), getPackageName());
        OrderManager.getInstance().init();
        OrderManager.getInstance().setOrderNumber(spu.getOrderNumber());
        GlobalEventManager.init();
    }

    public static Application getInstance() {
        return sInstance;
    }

    public synchronized void setUser(User user) {
        this.mUser = user;
    }

    public synchronized User getUser() {
        return mUser;
    }
}
/*
 * Copyright 2016, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.qg.smartprinter;

public interface BasePresenter {

    void subscribe();

    void unsubscribe();

}
/*
 * Copyright 2016, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.qg.smartprinter;

public interface BaseView<T> {

    void setPresenter(T presenter);

}
package com.qg.smartprinter.data.source;

import com.google.gson.Gson;

import java.util.UUID;

/**
 * 接收的报文
 *
 * @author TZH
 * @version 1.0
 */
public class Message {

    // 报文编号
    private String mId;

    // 报文内容
    private byte[] mContent;

    // 报文类型
    private String mType;

    // 接收时间
    private String mTime;

    // 对应的订单编号
    private String mOrderId;


    public Message(byte[] content, String type, String time, String orderId) {
        this(UUID.randomUUID().toString(), content, type, time, orderId);
    }

    public Message(String id, byte[] content, String type, String time, String orderId) {
        mId = id;
        mContent = content;
        mType = type;
        mTime = time;
        mOrderId = orderId;
    }

    public String getId() {
        return mId;
    }

    @Override
    public String toString() {
        return "订单ID：" + mOrderId + "\n"
                + "类型：" + mType + "\n"
                + "时间：" + mTime + "\n"
//              +  "报文：" + new Gson().toJson(mContent)
                ;
    }

    public void setId(String id) {
        mId = id;
    }

    public byte[] getContent() {
        return mContent;
    }

    public void setContent(byte[] content) {
        mContent = content;
    }

    public String getType() {
        return mType;
    }

    public void setType(String type) {
        mType = type;
    }

    public String getTime() {
        return mTime;
    }

    public void setTime(String time) {
        mTime = time;
    }

    public String getOrderId() {
        return mOrderId;
    }

    public void setOrderId(String orderId) {
        mOrderId = orderId;
    }
}

package com.qg.smartprinter.data.source;

import android.support.annotation.NonNull;

import com.google.gson.Gson;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.util.DateUtils;

/**
 * 发送的订单
 *
 * @author TZH
 * @version 1.0
 */
public class Order {

    // 订单编号
    private String mId;

    // 订单内容
    private String mContent;

    // 订单时间信息
    private String mTime;

    // 订单类型
    private String mType;

    // 订单状态
    private String mStatus;

    //订单发送报文
    private byte[] mMessage;

    public Order(String id, String content, String time, String type, byte[] message, String status) {
        mId = id;
        mContent = content;
        mTime = time;
        mType = type;
        mMessage = message;
        mStatus = status;
    }

    @Override
    public String toString() {
        return "ID：" + mId + "\n" +
                "时间：" + mTime + "\n" +
                "类型：" + getType() + "\n" +
                "状态：" + mStatus + "\n"
                ;
    }

    public String getId() {
        return mId;
    }

    public void setId(String id) {
        mId = id;
    }

    public String getContent() {
        return mContent;
    }

    public void setContent(String content) {
        mContent = content;
    }

    public String getTime() {
        return mTime;
    }

    public void setTime(String time) {
        mTime = time;
    }

    public String getType() {
        return mType;
    }

    public void setType(String type) {
        mType = type;
    }

    public byte[] getMessage() {
        return mMessage;
    }

    public void setMessage(byte[] message) {
        mMessage = message;
    }

    public String getStatus() {
        return mStatus;
    }

    public void setStatus(String status) {
        mStatus = status;
    }

    public static Order fromBOrder(BOrder o) {
        return new Order(
                String.valueOf(o.getOrderNumber()),
                new Gson().toJson(o.getData()),
                DateUtils.getDateString(),
                o.getType(),
                o.toRealBytes(),
                WAIT_SEND
        );
    }

    public static final String REQUEST = "请求发送";
    public static final String SEND_OR_RESEND = "发送/重传";
    public static final String WAIT_SEND = "等待发送";
    public static final String WAIT_RECEIVE = "发送中(等待应答)";
    public static final String RECEIVE_SUCCESS = "发送成功(收到应答)";
    public static final String UNFINISHED = "打印未完成(异常断开)";


    public static final int TYPE_UNKNOWN = 0;
    public static final int TYPE_BT = 1;
    public static final int TYPE_WIFI = 2;

    public static int getTargetDeviceType(@NonNull String type) {
        switch (type) {
            case BOrder.BT_ORDER_STR:
            case BOrder.BT_CORR_ORDER_STR:
                return TYPE_BT;
            case BOrder.WIFI_ORDER_STR:
            case BOrder.WIFI_CORR_ORDER_STR:
                return TYPE_WIFI;
            default:
                return TYPE_UNKNOWN;
        }
    }
}


package com.qg.smartprinter.data.source;

import android.provider.BaseColumns;

/**
 * The contract used for the db to save the orders locally.
 */
public final class OrderContract {
    // To prevent someone from accidentally instantiating the contract class,
    // give it an empty constructor.
    private OrderContract() {
    }

    interface OrderColumns {
        String ORDER_ID = "order_id";
        String ORDER_CONTENT = "order_content";
        String ORDER_TIME = "order_time";
        String ORDER_STATUS = "order_status";
        String ORDER_TYPE = "order_type";
        String ORDER_MESSAGE = "order_message";
    }

    interface MessageColumns {
        String MESSAGE_ID = "message_id";
        String MESSAGE_CONTENT = "message_content";
        String MESSAGE_TYPE = "message_type";
        String MESSAGE_TIME = "message_time";
        String MESSAGE_ORDER_ID = "message_order_id";
    }

    public static class Orders implements OrderColumns, BaseColumns {

    }

    public static class Messages implements MessageColumns, BaseColumns {

    }

}
package com.qg.smartprinter.data.source;

import android.support.annotation.NonNull;

import java.util.List;

import rx.Observable;

public interface OrdersDataSource {

    Observable<List<Order>> getOrders();

    Observable<List<Message>> getMessagesWithOrderId(@NonNull String orderId);

    void sendOrder(@NonNull Order order);

    void updateOrder(@NonNull String orderId, String status);

    void updateOrderType(@NonNull String orderId, String type);

    void receiveMessage(@NonNull Message message);
}
package com.qg.smartprinter.data.source;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.provider.BaseColumns;

import com.qg.smartprinter.data.source.OrderContract.MessageColumns;
import com.qg.smartprinter.data.source.OrderContract.Messages;
import com.qg.smartprinter.data.source.OrderContract.OrderColumns;
import com.qg.smartprinter.data.source.OrderContract.Orders;

/**
 * OrdersDbHelper
 */
public class OrdersDbHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "Orders.db";

    // If you change the database schema, you must increment the database version.
    private static final int DATABASE_VERSION = 3;

    interface Tables {
        String ORDERS = "orders";
        String MESSAGES = "messages";
    }

    interface References {
        String ORDER_ID = "REFERENCES " + Tables.ORDERS + "(" + Orders.ORDER_ID + ")";
    }

    OrdersDbHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("CREATE TABLE " + Tables.ORDERS + "(" +
                BaseColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
                OrderColumns.ORDER_ID + " TEXT NOT NULL," +
                OrderColumns.ORDER_TIME + " TEXT NOT NULL," +
                OrderColumns.ORDER_TYPE + " TEXT NOT NULL," +
                OrderColumns.ORDER_STATUS + " TEXT NOT NULL," +
                OrderColumns.ORDER_CONTENT + " TEXT NOT NULL," +
                OrderColumns.ORDER_MESSAGE + " BLOB)");

        db.execSQL("CREATE TABLE " + Tables.MESSAGES + "(" +
                BaseColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
                MessageColumns.MESSAGE_ID + " TEXT NOT NULL," +
                MessageColumns.MESSAGE_CONTENT + " TEXT NOT NULL," +
                MessageColumns.MESSAGE_TYPE + " TEXT NOT NULL," +
                MessageColumns.MESSAGE_TIME + " TEXT NOT NULL," +
                Messages.MESSAGE_ORDER_ID + " TEXT NOT NULL " + References.ORDER_ID + " ON DELETE CASCADE)");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + Tables.MESSAGES);
        db.execSQL("DROP TABLE IF EXISTS " + Tables.ORDERS);
        onCreate(db);
    }

    static void deleteDatabase(Context context) {
        context.deleteDatabase(DATABASE_NAME);
    }
}


package com.qg.smartprinter.data.source;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.annotation.NonNull;
import android.text.TextUtils;

import com.qg.common.logger.Log;
import com.qg.smartprinter.data.source.OrderContract.Messages;
import com.qg.smartprinter.data.source.OrderContract.Orders;
import com.qg.smartprinter.data.source.OrdersDbHelper.Tables;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;
import com.squareup.sqlbrite.BriteDatabase;
import com.squareup.sqlbrite.SqlBrite;

import java.util.List;

import rx.Observable;
import rx.functions.Func1;

import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;

/**
 * Concrete implementation to load orders from the data sources into the memory.
 *
 * @author TZH
 * @version 1.0
 */
public class OrdersRepository implements OrdersDataSource {
    private static final String TAG = "OrdersRepository";

    private static OrdersRepository INSTANCE;

    private BriteDatabase mDbHelper;

    // Prevent direct instantiation.
    private OrdersRepository(@NonNull Context context,
                             @NonNull BaseSchedulerProvider schedulerProvider) {
        checkNotNull(context);
        init(context, schedulerProvider);
    }

    public void init(Context context, BaseSchedulerProvider schedulerProvider) {
        OrdersDbHelper dbHelper = new OrdersDbHelper(context);
        SqlBrite sqlBrite = new SqlBrite.Builder().build();
        mDbHelper = sqlBrite.wrapDatabaseHelper(dbHelper, schedulerProvider.io());
    }

    public void deleteDatabase(Context context, BaseSchedulerProvider schedulerProvider) {
        mDbHelper.close();
        OrdersDbHelper.deleteDatabase(context);
        init(context, schedulerProvider);
    }

    public static OrdersRepository getInstance(@NonNull Context context,
                                               @NonNull BaseSchedulerProvider schedulerProvider) {
        if (INSTANCE == null) {
            INSTANCE = new OrdersRepository(context, schedulerProvider);
        }
        return INSTANCE;
    }

    @Override
    public Observable<List<Order>> getOrders() {
        String[] projection = {
                Orders.ORDER_ID,
                Orders.ORDER_CONTENT,
                Orders.ORDER_TIME,
                Orders.ORDER_TYPE,
                Orders.ORDER_STATUS,
                Orders.ORDER_MESSAGE
        };

        String sql = String.format("SELECT %s FROM %s", TextUtils.join(",", projection), Tables.ORDERS);
        return mDbHelper.createQuery(Tables.ORDERS, sql)
                .mapToList(new Func1<Cursor, Order>() {
                    @Override
                    public Order call(Cursor c) {
                        String itemId = c.getString(c.getColumnIndexOrThrow(Orders.ORDER_ID));
                        String time = c.getString(c.getColumnIndexOrThrow(Orders.ORDER_TIME));
                        String type = c.getString(c.getColumnIndexOrThrow(Orders.ORDER_TYPE));
                        String status = c.getString(c.getColumnIndexOrThrow(Orders.ORDER_STATUS));
                        String content = c.getString(c.getColumnIndexOrThrow(Orders.ORDER_CONTENT));
                        byte[] message = c.getBlob(c.getColumnIndexOrThrow(Orders.ORDER_MESSAGE));

                        return new Order(itemId, content, time, type, message, status);
                    }
                });
    }

    @Override
    public Observable<List<Message>> getMessagesWithOrderId(@NonNull String orderId) {
        String[] projection = {
                Messages.MESSAGE_ID,
                Messages.MESSAGE_CONTENT,
                Messages.MESSAGE_TYPE,
                Messages.MESSAGE_TIME,
                Messages.MESSAGE_ORDER_ID
        };

        String sql = String.format("SELECT %s FROM %s WHERE %s LIKE ?",
                TextUtils.join(",", projection), Tables.MESSAGES, Messages.MESSAGE_ORDER_ID);
        return mDbHelper.createQuery(Tables.MESSAGES, sql, orderId)
                .mapToList(new Func1<Cursor, Message>() {
                    @Override
                    public Message call(Cursor c) {
                        String itemId = c.getString(c.getColumnIndexOrThrow(Messages.MESSAGE_ID));
                        String type = c.getString(c.getColumnIndexOrThrow(Messages.MESSAGE_TYPE));
                        String time = c.getString(c.getColumnIndexOrThrow(Messages.MESSAGE_TIME));
                        byte[] content = c.getBlob(c.getColumnIndexOrThrow(Messages.MESSAGE_CONTENT));
                        String itemOrderId = c.getString(c.getColumnIndexOrThrow(Messages.MESSAGE_ORDER_ID));

                        return new Message(itemId, content, type, time, itemOrderId);
                    }
                });
    }

    @Override
    public void sendOrder(@NonNull Order order) {
        checkNotNull(order);
        ContentValues values = new ContentValues();
        values.put(Orders.ORDER_ID, order.getId());
        values.put(Orders.ORDER_TIME, order.getTime());
        values.put(Orders.ORDER_TYPE, order.getType());
        values.put(Orders.ORDER_STATUS, order.getStatus());
        values.put(Orders.ORDER_CONTENT, order.getContent());
        values.put(Orders.ORDER_MESSAGE, order.getMessage());
        mDbHelper.insert(Tables.ORDERS, values, SQLiteDatabase.CONFLICT_REPLACE);
    }

    @Override
    public void updateOrder(@NonNull String orderId, String status) {
        ContentValues values = new ContentValues();
        values.put(Orders.ORDER_STATUS, status);

        String selection = Orders.ORDER_ID + " LIKE ?";
        String[] selectionArgs = {orderId};

        mDbHelper.update(Tables.ORDERS, values, selection, selectionArgs);
    }

    @Override
    public void updateOrderType(@NonNull String orderId, String type) {
        ContentValues values = new ContentValues();
        values.put(Orders.ORDER_TYPE, type);

        String selection = Orders.ORDER_ID + " LIKE ?";
        String[] selectionArgs = {orderId};

        mDbHelper.update(Tables.ORDERS, values, selection, selectionArgs);
    }

    @Override
    public void receiveMessage(@NonNull Message message) {
        ContentValues values = new ContentValues();
        values.put(Messages.MESSAGE_ID, message.getId());
        values.put(Messages.MESSAGE_CONTENT, message.getContent());
        values.put(Messages.MESSAGE_TIME, message.getTime());
        values.put(Messages.MESSAGE_TYPE, message.getType());
        values.put(Messages.MESSAGE_ORDER_ID, message.getOrderId());
        mDbHelper.insert(Tables.MESSAGES, values, SQLiteDatabase.CONFLICT_REPLACE);
    }
}
package com.qg.smartprinter.data.source;

import android.support.annotation.NonNull;

import com.qg.smartprinter.localorder.Printer;

import java.util.List;

import rx.Observable;

/**
 * @author TZH
 * @version 1.0
 */
public interface PrintersDataSource {
    Observable<List<Printer>> getPrinters();

    void addPrinter(@NonNull Printer printer);

    void removePrinter(@NonNull String printerId);
}
package com.qg.smartprinter.data.source;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.qg.common.logger.Log;
import com.qg.smartprinter.localorder.Printer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import rx.Observable;

import static com.qg.common.Preconditions.checkNotNull;

/**
 * @author TZH
 * @version 1.0
 */
public class PrintersRepository implements PrintersDataSource {
    private static final String TAG = "PrintersRepository";

    private static final PrintersRepository printersRepository = new PrintersRepository();

    @NonNull
    private Map<String, Printer> mConnectedPrinters;

    private PrintersRepository() {
        mConnectedPrinters = new HashMap<>();
    }

    public static PrintersRepository getInstance() {
        return printersRepository;
    }

    @Override
    public Observable<List<Printer>> getPrinters() {
        Log.d(TAG, "Printer: size:" + mConnectedPrinters.values().size());
        return Observable.from(mConnectedPrinters.values()).toList();
    }

    @Override
    public void addPrinter(@NonNull Printer printer) {
        checkNotNull(printer);
        String id = String.valueOf(printer.getId());
        mConnectedPrinters.put(id, printer);
        Log.d(TAG, "addPrinter: id:" + id + "; size:" + mConnectedPrinters.values().size());
    }

    @Override
    public void removePrinter(@NonNull String printerId) {
        checkNotNull(printerId);
        mConnectedPrinters.remove(printerId);
        Log.d(TAG, "removePrinter: id" + printerId + "; size:" + mConnectedPrinters.values().size());
    }
}
package com.qg.smartprinter.dummy;

import com.qg.smartprinter.R;
import com.qg.smartprinter.logic.model.CookInView;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by TZH on 2016/7/25.
 */
public class CookbookDummy {

    public static final int[] PICTURES = {
            R.drawable.baiguachaoshaoya,
            R.drawable.caiganbaicaibaolonggutang,
            R.drawable.caiganrousuizhou,
            R.drawable.caipuzhengroubing,
            R.drawable.chongcaohuadunshouroutang,
            R.drawable.fanqiezhurousuijidan
    };

    public static final String[] NAMES = {
            "白瓜炒烧鸭",
            "菜干白菜煲龙骨汤",
            "菜干肉碎粥",
            "蒸肉饼",
            "虫草花炖瘦肉汤",
            "番茄猪肉碎鸡蛋"
    };

    public static final Integer[] PRICES = {
            10,
            16,
            8,
            9,
            18,
            12
    };

    public static final List<CookInView> newCooks() {
        List<CookInView> cooks = new ArrayList<>();
        for (int i = 0; i < NAMES.length; i++) {
            cooks.add(new CookInView(PICTURES[i % PICTURES.length], NAMES[i], PRICES[i]));
        }
        return cooks;
    }
}
package com.qg.smartprinter.dummy;

import com.qg.common.logger.Log;
import com.qg.smartprinter.localorder.OrderManager;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.BOrderData;
import com.qg.smartprinter.localorder.messages.BPhoto;
import com.qg.smartprinter.localorder.messages.BQRCode;
import com.qg.smartprinter.localorder.messages.BText;
import com.qg.smartprinter.localorder.util.Charsets;
import com.qg.smartprinter.logic.model.Business;
import com.qg.smartprinter.logic.model.LocalOrder;
import com.qg.smartprinter.logic.model.OrderContent;

import java.util.ArrayList;
import java.util.Date;
import java.util.Random;

/**
 * 订单数据模拟
 */
public class OrderDummy {
    private static final String TAG = "OrderDummy";

    private static String TEST_URL = "https://www.baidu.com/";

    private static byte[] TEST_PHOTO = {
            (byte) 0x78, (byte) 0x0F, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xAB, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x66, (byte) 0x81, (byte) 0x5B, (byte) 0x82, (byte) 0x17, (byte) 0x84, (byte) 0x5B, (byte) 0x86, (byte) 0x10, (byte) 0x87, (byte) 0x57, (byte) 0x8C, (byte) 0x0B, (byte) 0x8A, (byte) 0x02, (byte) 0x82, (byte) 0x52, (byte) 0x8F, (byte) 0x08, (byte) 0x8F, (byte) 0x51, (byte) 0x91, (byte) 0x05, (byte) 0x91, (byte) 0x51, (byte) 0x92, (byte) 0x03, (byte) 0x93, (byte) 0x4F, (byte) 0x89, (byte) 0x03, (byte) 0x92, (byte) 0x03, (byte) 0x88, (byte) 0x4F, (byte) 0x86, (byte) 0x08, (byte) 0x8E, (byte) 0x07, (byte) 0x87, (byte) 0x4D, (byte) 0x87, (byte) 0x08, (byte) 0x8D, (byte) 0x08, (byte) 0x88, (byte) 0x4C, (byte) 0x87, (byte) 0x08, (byte) 0x8E, (byte) 0x08, (byte) 0x87, (byte) 0x4C, (byte) 0x87, (byte) 0x08, (byte) 0x8E, (byte) 0x07, (byte) 0x88, (byte) 0x4C, (byte) 0x87, (byte) 0x08, (byte) 0x8E, (byte) 0x07, (byte) 0x89, (byte) 0x4A, (byte) 0x88, (byte) 0x08, (byte) 0x8D, (byte) 0x08, (byte) 0x89, (byte) 0x4A, (byte) 0x88, (byte) 0x08, (byte) 0x8D, (byte) 0x08, (byte) 0x89, (byte) 0x4A, (byte) 0x88, (byte) 0x08, (byte) 0x8E, (byte) 0x07, (byte) 0x89, (byte) 0x4A, (byte) 0x89, (byte) 0x06, (byte) 0x90, (byte) 0x05, (byte) 0x8B, (byte) 0x48, (byte) 0xA1, (byte) 0x01, (byte) 0x8E, (byte) 0x46, (byte) 0xB4, (byte) 0x41, (byte) 0xB9, (byte) 0x3D, (byte) 0xBD, (byte) 0x3B, (byte) 0xBF, (byte) 0x38, (byte) 0x88, (byte) 0x03, (byte) 0x94, (byte) 0x02, (byte) 0x9F, (byte) 0x36, (byte) 0x88, (byte) 0x07, (byte) 0x90, (byte) 0x05, (byte) 0x91, (byte) 0x06, (byte) 0x87, (byte) 0x36, (byte) 0x87, (byte) 0x0A, (byte) 0x8D, (byte) 0x08, (byte) 0x8D, (byte) 0x09, (byte) 0x86, (byte) 0x36, (byte) 0x86, (byte) 0x0C, (byte) 0x8B, (byte) 0x0A, (byte) 0x8B, (byte) 0x0B, (byte) 0x88, (byte) 0x33, (byte) 0x87, (byte) 0x0B, (byte) 0x8A, (byte) 0x0C, (byte) 0x89, (byte) 0x0C, (byte) 0x88, (byte) 0x33, (byte) 0x86, (byte) 0x0C, (byte) 0x8A, (byte) 0x0C, (byte) 0x89, (byte) 0x0C, (byte) 0x87, (byte) 0x34, (byte) 0x87, (byte) 0x0B, (byte) 0x8A, (byte) 0x0C, (byte) 0x89, (byte) 0x0C, (byte) 0x87, (byte) 0x34, (byte) 0x87, (byte) 0x0A, (byte) 0x8A, (byte) 0x0E, (byte) 0x89, (byte) 0x0A, (byte) 0x88, (byte) 0x34, (byte) 0x88, (byte) 0x06, (byte) 0x8C, (byte) 0x10, (byte) 0x89, (byte) 0x08, (byte) 0x89, (byte) 0x34, (byte) 0x99, (byte) 0x12, (byte) 0x99, (byte) 0x34, (byte) 0x98, (byte) 0x13, (byte) 0x99, (byte) 0x35, (byte) 0x96, (byte) 0x08, (byte) 0x81, (byte) 0x0C, (byte) 0x98, (byte) 0x35, (byte) 0x95, (byte) 0x08, (byte) 0x82, (byte) 0x0D, (byte) 0x96, (byte) 0x36, (byte) 0x95, (byte) 0x09, (byte) 0x81, (byte) 0x0D, (byte) 0x96, (byte) 0x37, (byte) 0x93, (byte) 0x19, (byte) 0x95, (byte) 0x37, (byte) 0x92, (byte) 0x1B, (byte) 0x94, (byte) 0x37, (byte) 0x91, (byte) 0x1D, (byte) 0x92, (byte) 0x39, (byte) 0x8F, (byte) 0x20, (byte) 0x8F, (byte) 0x3B, (byte) 0x8C, (byte) 0x23, (byte) 0x8E, (byte) 0x3B, (byte) 0x8B, (byte) 0x25, (byte) 0x8C, (byte) 0x3D, (byte) 0x8A, (byte) 0x26, (byte) 0x8A, (byte) 0x3F, (byte) 0x88, (byte) 0x27, (byte) 0x89, (byte) 0x40, (byte) 0x88, (byte) 0x15, (byte) 0x81, (byte) 0x12, (byte) 0x87, (byte) 0x42, (byte) 0x87, (byte) 0x08, (byte) 0x81, (byte) 0x07, (byte) 0x81, (byte) 0x03, (byte) 0x81, (byte) 0x01, (byte) 0x81, (byte) 0x11, (byte) 0x87, (byte) 0x42, (byte) 0x87, (byte) 0x08, (byte) 0x8A, (byte) 0x03, (byte) 0x88, (byte) 0x0A, (byte) 0x88, (byte) 0x41, (byte) 0x89, (byte) 0x08, (byte) 0x89, (byte) 0x03, (byte) 0x86, (byte) 0x01, (byte) 0x81, (byte) 0x0A, (byte) 0x88, (byte) 0x42, (byte) 0x88, (byte) 0x09, (byte) 0x87, (byte) 0x06, (byte) 0x86, (byte) 0x0A, (byte) 0x88, (byte) 0x41, (byte) 0x8A, (byte) 0x24, (byte) 0x89, (byte) 0x41, (byte) 0x8A, (byte) 0x12, (byte) 0x81, (byte) 0x11, (byte) 0x89, (byte) 0x41, (byte) 0x8B, (byte) 0x0E, (byte) 0x85, (byte) 0x0F, (byte) 0x8B, (byte) 0x40, (byte) 0x8C, (byte) 0x0C, (byte) 0x87, (byte) 0x0D, (byte) 0x8C, (byte) 0x40, (byte) 0x8E, (byte) 0x08, (byte) 0x8B, (byte) 0x0B, (byte) 0x8C, (byte) 0x40, (byte) 0x90, (byte) 0x04, (byte) 0x8E, (byte) 0x08, (byte) 0x8E, (byte) 0x40, (byte) 0xA6, (byte) 0x01, (byte) 0x91, (byte) 0x40, (byte) 0xB8, (byte) 0x40, (byte) 0xB7, (byte) 0x42, (byte) 0xB6, (byte) 0x42, (byte) 0xB6, (byte) 0x43, (byte) 0xB4, (byte) 0x44, (byte) 0xB4, (byte) 0x45, (byte) 0xB2, (byte) 0x47, (byte) 0xB0, (byte) 0x48, (byte) 0xAF, (byte) 0x4A, (byte) 0xAE, (byte) 0x4C, (byte) 0xAB, (byte) 0x4E, (byte) 0x92, (byte) 0x03, (byte) 0x93, (byte) 0x53, (byte) 0x88, (byte) 0x11, (byte) 0x8A, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x7F, (byte) 0x4F, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xAB,
    };

    private static String[] clientNames = {
            "X亭烤肉",
            "路边大排档",
            "X工三饭"
    };

//    private static String[] companyNames = {
//            "丑团外卖",
//            "饱了么",
//            "千分外卖"
//    };
//    private static final String[] userNames = {
//            "丁一",
//            "陈二",
//            "张三",
//            "李四",
//            "王五",
//            "赵六",
//            "田七",
//            "钱八",
//            "孙九"
//    };

    //    private static final String[] userAddresses = {
//            "宿舍3楼",
//            "宿舍4楼",
//            "宿舍5楼",
//            "宿舍6楼",
//            "宿舍7楼",
//            "工一",
//            "教六",
//    };
//
    private static final String[] addresses = {
            "X工路边",
            "X亭美食街",
            "X亭小作坊"
    };

    private static final String[] phones = {
            "10100000000",
            "10111111111",
            "10122222222",
            "10133333333",
    };

    private static <T> T random(T[] objs) {
        Random random = new Random();
        return objs[random.nextInt(objs.length)];
    }

    private static LocalOrder newOrder(int orderId) {
        String clientName = random(clientNames);
        String clientAddress = random(addresses);
        String clientPhone = random(phones);

        Business u = new Business();
        u.setName(clientName);
        u.setAddress(clientAddress);
        u.setPhone(clientPhone);
        u.setAdvertisement("");

        Date inDate = new Date();

        final int contentSize = 3;
        ArrayList<OrderContent> contents = new ArrayList<>();
        for (int i = 0; i < contentSize; i++) {
            contents.add(new OrderContent(
                    random(CookbookDummy.NAMES),
                    1,
                    random(CookbookDummy.PRICES)
            ));
        }

        return new LocalOrder.Builder()
                .orderId(orderId)
                .orderTime(inDate)
                .tableNumber(new Random().nextInt(9) + 1)
                .paymentMethod("支付宝")
                .contents(contents)
                .business(u)
                .build();
    }


    /**
     * 获取足够大的订单文本
     *
     * @param orderId   订单ID
     * @param maxLength 最大长度
     * @return 文本,字节数在[maxLength - 1000, maxLength]这个区间内
     */
    private static String newLargeNumText(int orderId, int maxLength) {
//        int minLength = maxLength - 1000;
//        minLength = minLength < 0 ? 0 : minLength;
        int minLength = maxLength;
        return newLargeNumText(orderId, minLength, maxLength);
    }

    private static String newLargeNumText(int orderId, int min, int max) {
//        int needLength = new Random().nextInt(max - min) + min;
        int needLength = max;
        StringBuilder sb = new StringBuilder();
        int length = 0;
        int orderCount = 0;
        while (length < needLength) {
            String printString = "(第" + (orderCount + 1) + "份文本):\n" + newOrder(orderId).getPrintString() + "\n";
            int appendLength = printString.getBytes(Charsets.PRINTER_CHARSET).length;

            if (length + appendLength >= needLength) {
                break;
            }
            sb.append(printString);
            length += appendLength;
            orderCount++;
        }
        return sb.toString();
    }

    public static BOrderData newOrderData(int orderId) {
        BOrderData orderData = new BOrderData();

        orderData.add(new BPhoto(TEST_PHOTO));
        orderData.add(new BText(newOrder(orderId).getPrintString()));
        orderData.add(new BQRCode(TEST_URL));

        return orderData;
    }


    public static BOrder generateOrder(boolean needPhoto, int needLength, boolean needQRCode) {
        return OrderDummy.newBOrder(
                OrderManager.getInstance().getNextOrderNumber(),
                needPhoto,
                needLength,
                needQRCode
        );
    }
    /**
     * 获取足够大的订单
     *
     * @param hasPhoto  是否有图
     * @param orderId   订单ID
     * @param maxLength 最大长度
     * @param hasQRCode 是否有二维码
     * @return 一份订单, 长度(字节数)在[maxLength - 1000, maxLength]这个区间内
     */
    public static BOrder newBOrder(int orderId, boolean hasPhoto, int maxLength, boolean hasQRCode) {
        BOrderData bOrderData = new BOrderData();
        BPhoto bPhoto = new BPhoto(OrderDummy.TEST_PHOTO);
        BQRCode bqrCode = new BQRCode(TEST_URL);

        int needTextLength = maxLength;
        needTextLength -= (hasPhoto ? bPhoto.toBytes().length : 0);
        needTextLength -= (hasQRCode ? bqrCode.toBytes().length : 0);
        Log.d(TAG, "newBOrder: " + needTextLength);
//        int needTextLength = maxLength;

        if (hasPhoto) {
            bOrderData.add(bPhoto);
        }
        bOrderData.add(new BText(newLargeNumText(orderId, needTextLength)));
        if (hasQRCode) {
            bOrderData.add(bqrCode);
        }

        Log.d(TAG, "生成订单数据字节数: " + bOrderData.toBytes().length);
        BOrder bOrder = BOrder.fromOrderData(orderId, bOrderData, 0);
        Log.d(TAG, "生成订单字节数: " + bOrder.toRealBytes().length);
        return bOrder;
    }

}
package com.qg.smartprinter.localorder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class AutoOrdersContainer {
    private LinkedList<AutoOrder> mAutoOrderList;

    public AutoOrdersContainer() {
        mAutoOrderList = new LinkedList<>();
    }

    public void reset() {
        mAutoOrderList.clear();
    }

    public void addAutoOther(AutoOrder autoOrder) {
        mAutoOrderList.add(autoOrder);
    }

    public void addAutoOther(int bytes, int times) {
        addAutoOther(new AutoOrder(bytes, times));
    }

    public void remove() {
        if (!mAutoOrderList.isEmpty()) {
            mAutoOrderList.removeLast();
        }
    }

    public List<Integer> getOrders(boolean shuffle) {
        List<Integer> result = new ArrayList<>();
        for (AutoOrder autoOrder : mAutoOrderList) {
            for (int i = 0; i < autoOrder.times; i++) {
                result.add(autoOrder.bytes);
            }
        }
        if (shuffle) {
            Collections.shuffle(result);
        }
        return result;
    }

    public LinkedList<AutoOrder> getAutoOrderList() {
        return mAutoOrderList;
    }

    public static class AutoOrder {
        int bytes;
        int times;

        public AutoOrder(int bytes, int times) {
            this.bytes = bytes;
            this.times = times;
        }

        @Override
        public String toString() {
            return bytes + "*" + times;
        }
    }
}
package com.qg.smartprinter.localorder.bluetooth;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.qg.smartprinter.R;
import com.qg.smartprinter.ui.BaseActivity;

import java.util.Set;

/**
 * This Activity appears as a dialog. It lists any paired devices and
 * devices detected in the area after discovery. When a device is chosen
 * by the user, the MAC address of the device is sent back to the parent
 * Activity in the result Intent.
 */
public class BTDeviceListActivity extends BaseActivity {

    public static String EXTRA_DEVICE_ADDRESS = "DEVICE_ADDRESS";

    private BluetoothAdapter mBtAdapter;

    private ArrayAdapter<String> mNewDevicesArrayAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_device_list);

        // Set result CANCELED in case the user backs out
        setResult(Activity.RESULT_CANCELED);

        // Initialize the button to perform device discovery
        Button scanButton = (Button) findViewById(R.id.button_scan);
        scanButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                doDiscovery();
                v.setVisibility(View.GONE);
            }
        });

        // Initialize array adapters. One for already paired devices and
        // one for newly discovered devices
        ArrayAdapter<String> pairedDevicesArrayAdapter =
                new ArrayAdapter<>(this, R.layout.device_name);
        mNewDevicesArrayAdapter = new ArrayAdapter<>(this, R.layout.device_name);

        // Find and set up the ListView for paired devices
        ListView pairedListView = (ListView) findViewById(R.id.paired_devices);
        pairedListView.setAdapter(pairedDevicesArrayAdapter);
        pairedListView.setOnItemClickListener(mDeviceClickListener);

        // Find and set up the ListView for newly discovered devices
        ListView newDevicesListView = (ListView) findViewById(R.id.new_devices);
        newDevicesListView.setAdapter(mNewDevicesArrayAdapter);
        newDevicesListView.setOnItemClickListener(mDeviceClickListener);

        // Register for broadcasts when a device is discovered
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        // Register for broadcasts when discovery has finished
        filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        this.registerReceiver(mReceiver, filter);

        // Get the local Bluetooth adapter
        mBtAdapter = BluetoothAdapter.getDefaultAdapter();

        // Get a set of currently paired devices
        Set<BluetoothDevice> pairedDevices = mBtAdapter.getBondedDevices();

        // If there are paired devices, add each one to the ArrayAdapter
        if (pairedDevices.size() > 0) {
            findViewById(R.id.title_paired_devices).setVisibility(View.VISIBLE);
            for (BluetoothDevice device : pairedDevices) {
                pairedDevicesArrayAdapter.add(device.getName() + "\n" + device.getAddress());
            }
        } else {
            String noDevices = getResources().getText(R.string.none_paired).toString();
            pairedDevicesArrayAdapter.add(noDevices);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // Make sure we're not doing discovery anymore
        if (mBtAdapter != null) {
            mBtAdapter.cancelDiscovery();
        }

        // Unregister broadcast listeners
        this.unregisterReceiver(mReceiver);
    }

    /**
     * Start device discover with the BluetoothAdapter
     */
    private void doDiscovery() {
        // Indicate scanning in the title
        setTitle(R.string.scanning);

        // Turn on sub-title for new devices
        findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);

        // If we're already discovering, stop it
        if (mBtAdapter.isDiscovering()) {
            mBtAdapter.cancelDiscovery();
        }

        // Request discover from BluetoothAdapter
        mBtAdapter.startDiscovery();
    }

    /**
     * The on-click listener for all devices in the ListViews
     */
    private AdapterView.OnItemClickListener mDeviceClickListener
            = new AdapterView.OnItemClickListener() {
        public void onItemClick(AdapterView<?> av, View v, int arg2, long arg3) {
            // Cancel discovery because it's costly and we're about to createSocket
            mBtAdapter.cancelDiscovery();

            // Get the device MAC address, which is the last 17 chars in the View
            String info = ((TextView) v).getText().toString();
            String address = info.substring(info.length() - 17);

            // Create the result Intent and include the MAC address
            Intent intent = new Intent();
            intent.putExtra(EXTRA_DEVICE_ADDRESS, address);

            // Set result and finish this Activity
            setResult(Activity.RESULT_OK, intent);
            finish();
        }
    };

    /**
     * The BroadcastReceiver that listens for discovered devices and changes the title when
     * discovery is finished
     */
    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            // When discovery finds a device
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                // Get the BluetoothDevice object from the Intent
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                // If it's already paired, skip it, because it's been listed already
                if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
                    mNewDevicesArrayAdapter.add(device.getName() + "\n" + device.getAddress());
                }
                // When discovery is finished, change the Activity title
            } else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
                setTitle(R.string.select_device);
                if (mNewDevicesArrayAdapter.getCount() == 0) {
                    Toast.makeText(BTDeviceListActivity.this, R.string.none_found, Toast.LENGTH_SHORT).show();
                }
            }
        }
    };

}
package com.qg.smartprinter.localorder.bluetooth;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.widget.Toast;

import com.qg.common.logger.Log;
import com.qg.smartprinter.R;
import com.qg.smartprinter.localorder.DevicesManager;
import com.qg.smartprinter.localorder.PrinterTestFragment;
import com.qg.smartprinter.localorder.device.BluetoothDeviceWrapper;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.util.rxbus.RxBus;

/**
 * This fragment controls Bluetooth to communicate with other devices.
 */
public class BTPrinterTestFragment extends PrinterTestFragment {

    private static final String TAG = "BluetoothPrinterTestFragment";

    private static final int REQUEST_CONNECT_DEVICE = 1;
    private static final int REQUEST_ENABLE_BT = 2;

    private BluetoothAdapter mBluetoothAdapter = null;

    private boolean mIsSetup;

    public static BTPrinterTestFragment newInstance() {

        Bundle args = new Bundle();

        BTPrinterTestFragment fragment = new BTPrinterTestFragment();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Get local Bluetooth adapter
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        // If the adapter is null, then Bluetooth is not supported
        if (mBluetoothAdapter == null) {
            FragmentActivity activity = getActivity();
            Toast.makeText(activity, "Bluetooth is not available", Toast.LENGTH_LONG).show();
            activity.finish();
        }
    }


    @Override
    public void onStart() {
        super.onStart();
        // If BT is ot on, request that it be enabled.
        // setupPrinter() will then be called during onActivityResult
        if (!mIsSetup) {
            setupPrinter();
        }
    }

    private void setupPrinter() {
        Log.d(TAG, "setupPrinter()");
        mIsSetup = true;
    }

    public RemoteDevice getDevice() {
        return DevicesManager.getInstance().getBTDevice();
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case REQUEST_CONNECT_DEVICE:
                // When BTDeviceListActivity returns with a device to createSocket
                if (resultCode == Activity.RESULT_OK) {
                    connectDevice(data);
                }
                break;
            case REQUEST_ENABLE_BT:
                // When the request to enable Bluetooth returns
                if (resultCode == Activity.RESULT_OK) {
                    // Bluetooth is now enabled
                    setupPrinter();
                } else {
                    // User did not enable Bluetooth or an error occurred
                    Log.d(TAG, "BT not enabled");
                    Toast.makeText(getActivity(), R.string.bt_not_enabled_leaving,
                            Toast.LENGTH_SHORT).show();
                    getActivity().finish();
                }
        }
    }

    /**
     * Establish connection with other divice
     *
     * @param data An {@link Intent} with {@link BTDeviceListActivity#EXTRA_DEVICE_ADDRESS} extra.
     */
    private void connectDevice(Intent data) {
        // Get the device MAC address
        String address = data.getExtras()
                .getString(BTDeviceListActivity.EXTRA_DEVICE_ADDRESS);
        // Get the BluetoothDevice object
        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
        Log.d(TAG, "connectDevice: " + address);
        // Attempt to createSocket to the device
        RxBus.getDefault().post(new Events.ConnectEvent(new BluetoothDeviceWrapper(device)));
    }

    @Override
    protected void connect() {
        if (!mBluetoothAdapter.isEnabled()) {
            Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
            return;
        }
        // Launch the WifiDeviceListActivity to see devices and do scan
        Intent serverIntent = new Intent(getActivity(), BTDeviceListActivity.class);
        startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);
    }
}
package com.qg.smartprinter.localorder.bluetooth;

import android.content.Context;
import android.content.Intent;

import com.qg.smartprinter.localorder.PrinterTestActivity;
import com.qg.smartprinter.localorder.PrinterTestFragment;

public class BTTestActivity extends PrinterTestActivity {
    public static void start(Context context) {
        Intent starter = new Intent(context, BTTestActivity.class);
        context.startActivity(starter);
    }

    @Override
    protected PrinterTestFragment getPrinterTestFragment() {
        return BTPrinterTestFragment.newInstance();
    }
}
/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License")";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.qg.smartprinter.localorder;

/**
 * Defines several constants used between {@link PrinterService} and the UI.
 */
public interface Constants {

    // Message types sent from the BluetoothPrStringerService Handler
    String MESSAGE_STATE_CHANGE = "1";
    String MESSAGE_READ = "2";
    String MESSAGE_DEVICE_NAME = "4";
    String MESSAGE_ERR = "MESSAGE_ERR";

    String MESSAGE_CONN_FAIL = "MESSAGE_CONN_FAIL";
    String MESSAGE_CONN_LOST = "MESSAGE_CONN_LOST";

    String MSG_ORDER_TCP = "MSG_ORDER_TCP";
    String MSG_ORDER_BT = "MSG_ORDER_BT";
    String MSG_CONNECT_TCP = "MSG_CONNECT_TCP";
    String MSG_CONNECT_BT = "MSG_CONNECT_BT";
    String MSG_DISCONNECT_TCP = "MSG_DISCONNECT_TCP";
    String MSG_DISCONNECT_BT = "MSG_DISCONNECT_BT";

    String OBJECT = "obj"; // obj in message

}
package com.qg.smartprinter.localorder.device;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;

import com.qg.smartprinter.localorder.ResendTaskManager;
import com.qg.smartprinter.localorder.device.socket.BTPrinterSocket;
import com.qg.smartprinter.localorder.device.socket.PrinterSocket;
import com.qg.smartprinter.localorder.messages.BOrder;

import java.io.IOException;

public class BluetoothDeviceWrapper extends RemoteDevice {
    public static final int TYPE = 1001;

    // 是否启用重传功能
    private static boolean IS_RESEND_IF_LOST = true;

    private ResendTaskManager mResendTaskManager = new ResendTaskManager();

    private BluetoothDevice mDevice;

    public BluetoothDeviceWrapper(BluetoothDevice device) {
        mDevice = device;
    }

    @Override
    public String getAddress() {
        return mDevice.getAddress();
    }

    @Override
    public String getName() {
        return mDevice.getName();
    }

    @Override
    public int getType() {
        return TYPE;
    }

    @Override
    public PrinterSocket createSocket() throws IOException {
        return BTPrinterSocket.create(mDevice, BluetoothAdapter.getDefaultAdapter());
    }

    @Override
    public void finish(long responseNum) {
        if (IS_RESEND_IF_LOST) {
            mResendTaskManager.finishTask(responseNum);
        }
        super.finish(responseNum);
    }

    @Override
    void internalOrder(final BOrder order) {
        if (IS_RESEND_IF_LOST) {
            mResendTaskManager.startTask(new ResendTaskManager.Task(order) {
                @Override
                protected void run() {
                    BluetoothDeviceWrapper.super.internalOrder(order);
                }
            });
        } else {
            super.internalOrder(order);
        }
    }

    @Override
    public void stop() {
        // Stop all tasks.
        mResendTaskManager.clearTasks();
        super.stop();
    }
}
package com.qg.smartprinter.localorder.device;

import android.support.annotation.IntDef;

import com.qg.common.logger.Log;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.DevicesManager;
import com.qg.smartprinter.localorder.PrinterService;
import com.qg.smartprinter.localorder.device.socket.PrinterSocket;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.BResponse;
import com.qg.smartprinter.localorder.util.CheckSumException;
import com.qg.smartprinter.localorder.util.CheckSumUtil;
import com.qg.smartprinter.localorder.util.DebugUtil;
import com.qg.smartprinter.util.rxbus.RxBus;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import rx.Observable;
import rx.functions.Action1;

import static com.qg.common.Preconditions.checkState;

public abstract class RemoteDevice {
    private static final String TAG = "RemoteDevice";

    private boolean mIdling = true;

    public static final int STATE_NONE = 0;
    public static final int STATE_CONNECTING = 1;
    public static final int STATE_CONNECTED = 2;

    private BOrder mLastOrder;

    @IntDef({STATE_NONE, STATE_CONNECTING, STATE_CONNECTED})
    @interface State {
    }

    @State
    private int mState;

    private ConnectThread mConnectThread;

    private ConnectedThread mConnectedThread;

    /**
     * Return the address of the remote device.
     */
    public abstract String getAddress();

    /**
     * Return the name of the remote device.
     */
    public abstract String getName();

    /**
     * Return the connection type of the remote device.
     */
    public abstract int getType();

    /**
     * Attempt to create a socket with the remote device.
     */
    public abstract PrinterSocket createSocket() throws IOException;

    /**
     * Attempt to connect the remote device.
     */
    public void connect() {
        mConnectThread = new ConnectThread(this);
        mConnectThread.start();
    }

    public void stop() {
        // Cancel any thread attempting to make a connection
        if (mConnectThread != null) {
            mConnectThread.cancel();
            mConnectThread = null;
        }

        // Cancel any thread currently running a connection
        if (mConnectedThread != null) {
            mConnectedThread.cancel();
            mConnectedThread = null;
        }
        setState(STATE_NONE);

        // If the last order not finished, update data.
        if (mLastOrder != null) {
            PrinterService.getBus().post(new PrinterService.UpdateDBOrderStatusEvent(
                    mLastOrder.getOrderNumber(),
                    Order.UNFINISHED
            ));
        }
    }

    public boolean order(final BOrder order) {
        if (!isIdling()) {
            return false;
        }
        setIdling(false);

        // Update the database
        PrinterService.getBus().post(new PrinterService.UpdateDBOrderStatusEvent(
                order.getOrderNumber(),
                Order.WAIT_RECEIVE
        ));

        // Record the order length and number.
        mLastOrder = order;

        internalOrder(order);
        return true;
    }

    void internalOrder(BOrder order) {
        // Save notifySend message.
        PrinterService.getBus().post(new PrinterService.InsertDBMessageEvent(
                order.orderNumber,
                order.toRealBytes(),
                Order.SEND_OR_RESEND
        ));
        write(order.toRealBytes());
    }

    public BOrder forceFinish() {
        BOrder order = mLastOrder;
        if (order != null) {
            onFinish();
        }
        return order;
    }
    public void finish(long responseNum) {
        // Filter
        if (mLastOrder != null && mLastOrder.getOrderNumber() == responseNum) {
            onFinish();
        }
    }

    private void onFinish() {
        // Set device idling delay.
        Observable.timer(getIdlingDelay(), TimeUnit.SECONDS)
                .subscribe(new Action1<Long>() {
                    @Override
                    public void call(Long aLong) {
                        setIdling(true);
                    }
                });
        mLastOrder = null;
    }

    private int getIdlingDelay() {
        int delay = (int) Math.ceil((float) mLastOrder.getBytesLength() / 1000);
        return delay <= 0 ? 1 : delay;
    }


    public void write(byte[] out) {
        // Create temporary object
        ConnectedThread r;

        // Synchronize a copy of the ConnectedThread
        synchronized (this) {
            if (mState != STATE_CONNECTED) return;
            r = mConnectedThread;
        }

        // Perform the write asynchronously
        r.write(out);
    }

    public boolean isIdling() {
        return mIdling;
    }

    private void setIdling(boolean idling) {
        mIdling = idling;
        onIdlingChange(idling);
    }

    private void onIdlingChange(boolean idling) {
        if (idling) {
            // Check if any order to notifySend.
            BOrder bOrder = DevicesManager.getInstance().nextOrder(this);
            if (bOrder != null) {
                checkState(order(bOrder));
            }
        }
    }

    @State
    public int getState() {
        return mState;
    }

    private void setState(@State int state) {
        mState = state;
        RxBus.getDefault().post(new Events.StateChangeEvent(this, state));
    }

    /**
     * This thread runs while attempting to make an outgoing connection
     * with a device. It runs straight through; the connection either
     * succeeds or fails.
     */
    private class ConnectThread extends Thread {
        private final PrinterSocket mmSocket;

        private final RemoteDevice mmDevice;

        ConnectThread(RemoteDevice device) {
            mmDevice = device;
            PrinterSocket tmp = null;

            // Get a PrinterSocket for a connection with the
            // given RemoteDevice
            try {
                tmp = device.createSocket();
            } catch (IOException e) {
                Log.e(TAG, "Socket create() failed", e);
            }
            mmSocket = tmp;
            setState(STATE_CONNECTING);
        }

        public void run() {
            // Make a connection to the PrinterSocket
            try {
                // This is a blocking call and will only return on a
                // successful connection or an exception
                mmSocket.connect();
            } catch (IOException e) {
                Log.e(TAG, "unable to createSocket()" +
                        " socket connection failure", e);
                try {
                    mmSocket.close();
                } catch (IOException e2) {
                    Log.e(TAG, "Encounter an exception when Socket.close() called", e2);
                }
                RxBus.getDefault().post(new Events.ConnectionFailedEvent(RemoteDevice.this, e));
                RemoteDevice.this.stop();
                return;
            }

            // Reset the ConnectThread because we're done
            synchronized (RemoteDevice.this) {
                mConnectThread = null;
            }

            // Start the connected thread
            mConnectedThread = new ConnectedThread(mmSocket, mmDevice);
            mConnectedThread.start();
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of createSocket socket failed", e);
            }
        }
    }

    /**
     * Maintain all input and output for a connected device.
     */
    private class ConnectedThread extends Thread {
        private final PrinterSocket mmSocket;

        private final InputStream mmInStream;

        private final OutputStream mmOutStream;

        ConnectedThread(PrinterSocket socket, RemoteDevice device) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
            // Get the PrinterSocket input and output streams
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();

                // Send the name of the connected device
                RxBus.getDefault().post(new Events.ConnectedEvent(device));

                setState(STATE_CONNECTED);
            } catch (IOException e) {
                Log.e(TAG, "Temp sockets not created", e);
            }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            byte[] buffer;
            // Keep listening to the InputStream while connected
            while (mState == STATE_CONNECTED) {
                try {
                    // Read from the InputStream
                    try {
                        buffer = readBytes();
                        RxBus.getDefault().post(new Events.ReadEvent(RemoteDevice.this, buffer));
                    } catch (CheckSumException e) {
                        // Check failed.
                        RxBus.getDefault().post(new Events.CheckSumFailedEvent(RemoteDevice.this, e));
                    }
                } catch (IOException e) {
                    RxBus.getDefault().post(new Events.ConnectionLostEvent(RemoteDevice.this, e));
                    RemoteDevice.this.stop();
                    break;
                }
            }
        }

        /**
         * Write to the connected OutStream.
         *
         * @param buffer The bytes to write
         */
        synchronized void write(byte[] buffer) {
            try {
                Log.d(TAG, "Write start.");
                mmOutStream.write(buffer);
                Log.d(TAG, "Write" + DebugUtil.getBytesString(buffer));
                Log.d(TAG, "Write end. Length of notifySend bytes:" + buffer.length);
            } catch (IOException e) {
                Log.e(TAG, "Exception during write", e);
            }
        }

        private byte[] readBytes() throws IOException {
            Log.v(TAG, "Read start.");
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            while (baos.size() < BResponse.BYTE_COUNT) {
                int read = mmInStream.read();
                baos.write(read);
            }
            Log.v(TAG, "Read end.");
            byte[] checkSignalBytes;
            checkSignalBytes = baos.toByteArray();
            Log.d(TAG, "ReadBytes: " + DebugUtil.getBytesString(checkSignalBytes));
            if (0 != CheckSumUtil.checkSum(checkSignalBytes)) {
                throw new CheckSumException("Checksum not true!", checkSignalBytes);
            }
            return checkSignalBytes;
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of createSocket socket failed", e);
            }
        }
    }
}
package com.qg.smartprinter.localorder.device.socket;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

/**
 * A bluetooth socket of printer.
 */
public class BTPrinterSocket implements PrinterSocket {

    private static final UUID WELL_KNOWN_SPP_UUID =
            UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    private BluetoothSocket mSocket;

    private BluetoothDevice mDevice;

    private BluetoothAdapter mAdapter;

    private BTPrinterSocket() {
    }

    public static BTPrinterSocket create(BluetoothDevice device, BluetoothAdapter adapter) {
        BTPrinterSocket socket = new BTPrinterSocket();
        socket.mDevice = device;
        socket.mAdapter = adapter;
        return socket;
    }

    @Override
    public InputStream getInputStream() throws IOException {
        return mSocket.getInputStream();
    }

    @Override
    public OutputStream getOutputStream() throws IOException {
        return mSocket.getOutputStream();
    }

    @Override
    public void connect() throws IOException {
        mAdapter.cancelDiscovery();
        mSocket = mDevice.createRfcommSocketToServiceRecord(WELL_KNOWN_SPP_UUID);
        mSocket.connect();
    }

    @Override
    public void close() throws IOException {
        if (mSocket != null) {
            mSocket.close();
        }
    }

    @Override
    public boolean isConnected() {
        return mSocket.isConnected();
    }
}
package com.qg.smartprinter.localorder.device.socket;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * Provides a client-side printer socket.
 */
public interface PrinterSocket {

    InputStream getInputStream() throws IOException;

    OutputStream getOutputStream() throws IOException;

    void connect() throws IOException;

    void close() throws IOException;

    boolean isConnected();
}
package com.qg.smartprinter.localorder.device.socket;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

/**
 * A TCP socket of printer.
 */
public class TCPPrinterSocket implements PrinterSocket {

    private Socket mSocket;

    private String mHost;

    private int mPort;

    private TCPPrinterSocket(String host, int port) {
        this.mHost = host;
        this.mPort = port;
    }

    public static TCPPrinterSocket create(String host, int port) {
        return new TCPPrinterSocket(host, port);
    }

    @Override
    public InputStream getInputStream() throws IOException {
        return mSocket.getInputStream();
    }

    @Override
    public OutputStream getOutputStream() throws IOException {
        return mSocket.getOutputStream();
    }

    @Override
    public void connect() throws IOException {
        mSocket = new Socket(mHost, mPort);
    }

    @Override
    public void close() throws IOException {
        if (mSocket != null) {
            mSocket.close();
        }
    }

    @Override
    public boolean isConnected() {
        return mSocket.isConnected();
    }
}
package com.qg.smartprinter.localorder.device;

import android.os.Parcel;
import android.os.Parcelable;

import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.PrinterService;
import com.qg.smartprinter.localorder.device.socket.PrinterSocket;
import com.qg.smartprinter.localorder.device.socket.TCPPrinterSocket;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.WifiOrderRequest;

import java.io.IOException;

public class WifiDevice extends RemoteDevice implements Parcelable {
    public static final int TYPE = 1002;

    /**
     * The network name
     */
    private String SSID;

    private String dstName;

    private int dstPort;

    private BOrder mKeepOrder;

    private int ip;

    public WifiDevice(String SSID, String dstName, int dstPort) {
        this.SSID = SSID;
        this.dstName = dstName;
        this.dstPort = dstPort;
    }

    private WifiDevice(Parcel in) {
        SSID = in.readString();
        dstName = in.readString();
        dstPort = in.readInt();
    }

    public String getAddress() {
        return dstName;
    }

    public String getName() {
        return SSID;
    }

    @Override
    public int getType() {
        return TYPE;
    }

    @Override
    public PrinterSocket createSocket() throws IOException {
        return TCPPrinterSocket.create(dstName, dstPort);
    }

    public static final Creator<WifiDevice> CREATOR = new Creator<WifiDevice>() {
        @Override
        public WifiDevice createFromParcel(Parcel in) {
            return new WifiDevice(in);
        }

        @Override
        public WifiDevice[] newArray(int size) {
            return new WifiDevice[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(SSID);
        dest.writeString(dstName);
        dest.writeInt(dstPort);
    }

    @Override
    public void finish(long responseNum) {
        super.finish(responseNum);
    }

    @Override
    void internalOrder(BOrder order) {
        // Keep the order until notify.
        mKeepOrder = order;
        // Request notifySend order;
        write(WifiOrderRequest.newRequestSignal(order, getIP()));
        PrinterService.getBus().post(new PrinterService.InsertDBMessageEvent(
                order.getOrderNumber(),
                order.toRealBytes(),
                Order.REQUEST));
    }

    public void notifySend() {
        if (mKeepOrder == null) {
            return;
        }
        // Send order.
        super.internalOrder(mKeepOrder);
        mKeepOrder = null;
    }

    public void setIP(int ip) {
        this.ip = ip;
    }

    public int getIP() {
        return ip;
    }

}
package com.qg.smartprinter.localorder;

import android.support.annotation.Nullable;

import com.qg.smartprinter.Injection;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.data.source.PrintersRepository;
import com.qg.smartprinter.localorder.device.BluetoothDeviceWrapper;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.BPrinterStatus;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import static com.qg.common.Preconditions.checkState;

public class DevicesManager {

    private Map<RemoteDevice, Integer> mWifiDeviceIPMap;

    private Map<RemoteDevice, Integer> mDeviceStatusCountMap;

    private Map<RemoteDevice, Integer> mOrderStatusCountMap;

    private Map<RemoteDevice, LinkedList<BOrder>> mOrderQueueMap;

    private DevicesManager() {
        mWifiDeviceIPMap = new HashMap<>();
        mDeviceStatusCountMap = new HashMap<>();
        mOrderStatusCountMap = new HashMap<>();
        mOrderQueueMap = new HashMap<>();
    }

    private static final DevicesManager INSTANCE = new DevicesManager();

    public static DevicesManager getInstance() {
        return INSTANCE;
    }

    /**
     * 发送订单到队列
     */
    public boolean sendOrder(RemoteDevice device, BOrder order) {
        if (!mOrderQueueMap.containsKey(device)) {
            mOrderQueueMap.put(device, new LinkedList<BOrder>());
        }
        if (device.isIdling()) {
            // 这份订单直接发送，不需要加入队列
            checkState(device.order(order));
            return true;
        }
        // 将未发送的订单添加到队列中
        return mOrderQueueMap.get(device).offer(order);
    }

    @Nullable
    public BOrder nextOrder(RemoteDevice device) {
        if (!mOrderQueueMap.containsKey(device)) {
            return null;
        }
        return mOrderQueueMap.get(device).poll();
    }

    public void clear() {
        mWifiDeviceIPMap.clear();
        mDeviceStatusCountMap.clear();
        mOrderStatusCountMap.clear();
        mOrderQueueMap.clear();
    }

    public int getNextDeviceStatusNumber(RemoteDevice device) {
        if (!mDeviceStatusCountMap.containsKey(device)) {
            return 1;
        }
        int num = mDeviceStatusCountMap.get(device);
        mDeviceStatusCountMap.put(device, num + 1);
        return num;
    }

    public int getNextOrderStatusNumber(RemoteDevice device) {
        if (!mOrderStatusCountMap.containsKey(device)) {
            return 1;
        }
        int num = mOrderStatusCountMap.get(device);
        mOrderStatusCountMap.put(device, num + 1);
        return num;
    }

    private void internalAddDevice(RemoteDevice device) {
        mDeviceStatusCountMap.put(device, 1);
        mOrderStatusCountMap.put(device, 1);
    }

    private void internalRemoveDevice(RemoteDevice device) {
        mDeviceStatusCountMap.remove(device);
        mOrderStatusCountMap.remove(device);
        mWifiDeviceIPMap.remove(device);
        // 将队列中的订单移除，并更新数据库。
        LinkedList<BOrder> removeOrders = mOrderQueueMap.remove(device);
        if (removeOrders != null) {
            for (BOrder removeOrder : removeOrders) {
                long orderNumber = removeOrder.getOrderNumber();
                PrinterService.getBus().post(new PrinterService.UpdateDBOrderStatusEvent(
                        orderNumber,
                        Order.UNFINISHED
                ));
            }
        }
    }

    // ------------------------------------
    // 辣鸡项目，整天改需求，浪费我时间，随便写
    private RemoteDevice mBTDevice;
    private RemoteDevice mTCPDevice;
    private Printer mBTPrinter;
    private Printer mTCPPrinter;

    void addDevice(RemoteDevice device) {
        if (device instanceof BluetoothDeviceWrapper) {
            if (mBTDevice != null) {
                // 蓝牙设备连接中，断开原连接
                mBTDevice.stop();
                removeDevice(mBTDevice);
            }
            mBTDevice = device;
        } else if (device instanceof WifiDevice) {
            if (mTCPDevice != null) {
                // TCP设备连接中，断开原连接
                mTCPDevice.stop();
                removeDevice(mTCPDevice);
            }
            mTCPDevice = device;
        }
        internalAddDevice(device);
    }

    void addPrinter(RemoteDevice device) {
        if (device instanceof BluetoothDeviceWrapper) {
            Printer printer = new Printer(
                    BluetoothDeviceWrapper.TYPE,
                    device.getName(),
                    device.getAddress(),
                    device
            );
            mBTPrinter = printer;
            Injection.providePrintersRepository()
                    .addPrinter(printer);
        } else if (device instanceof WifiDevice) {
            Printer printer = new Printer(
                    WifiDevice.TYPE,
                    device.getName(),
                    device.getAddress(),
                    device
            );
            mTCPPrinter = printer;
            Injection.providePrintersRepository()
                    .addPrinter(printer);
        }
    }

    void removeDevice(RemoteDevice device) {
        if (device == null) {
            return;
        }
        if (device.equals(mBTDevice)) {
            mBTDevice = null;
            if (mBTPrinter == null) {
                return;
            }
            PrintersRepository.getInstance().removePrinter(mBTPrinter.getId());
            mBTPrinter.setDevice(null);
            mBTPrinter = null;
        } else if (device.equals(mTCPDevice)) {
            mTCPDevice = null;
            if (mTCPPrinter == null) {
                return;
            }
            PrintersRepository.getInstance().removePrinter(mTCPPrinter.getId());
            mTCPPrinter.setDevice(null);
            mTCPPrinter = null;
        }
        internalRemoveDevice(device);
    }

    void updateDeviceStatus(RemoteDevice device, long printerId, BPrinterStatus status) {
        Printer printer;
        if (device.equals(mBTDevice)) {
            printer = mBTPrinter;
        } else if (device.equals(mTCPDevice)) {
            printer = mTCPPrinter;
        } else {
            return;
        }
        printer.setPrinterId(printerId);
        if (status != null) {
            printer.updateStatus(status);
        }
    }

    public RemoteDevice getBTDevice() {
        return mBTDevice;
    }

    public RemoteDevice getTCPDevice() {
        return mTCPDevice;
    }

}
package com.qg.smartprinter.localorder.event;

import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.util.CheckSumException;

import java.io.IOException;

/**
 * @author TZH
 * @version 1.0
 */
public abstract class Events {
    private Events() {
    }

    public static class RemoteEvent {
        private RemoteDevice mDevice;

        private RemoteEvent(RemoteDevice device) {
            mDevice = device;
        }

        public RemoteDevice getDevice() {
            return mDevice;
        }
    }

    public static class CheckSumFailedEvent extends RemoteEvent {
        private CheckSumException mException;

        public CheckSumFailedEvent(RemoteDevice device, CheckSumException e) {
            super(device);
            mException = e;
        }
    }

    public static class ConnectionLostEvent extends RemoteEvent {
        private IOException mException;

        public ConnectionLostEvent(RemoteDevice device, IOException e) {
            super(device);
            mException = e;
        }
    }

    public static class ConnectionFailedEvent extends RemoteEvent {
        private IOException mException;

        public ConnectionFailedEvent(RemoteDevice device, IOException e) {
            super(device);
            mException = e;
        }
    }

    public static class StateChangeEvent extends RemoteEvent {

        private int mState;

        public StateChangeEvent(RemoteDevice device, int state) {
            super(device);
            mState = state;
        }

        public int getState() {
            return mState;
        }
    }

    public static class ConnectEvent extends RemoteEvent {
        public ConnectEvent(RemoteDevice device) {
            super(device);
        }
    }

    public static class ConnectedEvent extends RemoteEvent {
        public ConnectedEvent
                (RemoteDevice device) {
            super(device);
        }
    }

    public static class OrderEvent extends RemoteEvent {
        private BOrder mOrder;
        private boolean mCorrected;

        public OrderEvent(RemoteDevice device, BOrder order) {
            this(device, order, false);
        }

        public OrderEvent(RemoteDevice device, BOrder order, boolean corrected) {
            super(device);
            mOrder = order;
            mCorrected = corrected;
        }

        /**
         * 是否为异常修正订单？
         */
        public boolean isCorrected() {
            return mCorrected;
        }

        public BOrder getOrder() {
            return mOrder;
        }

    }

    public static class OrderLostEvent {
        private BOrder mOrder;

        public OrderLostEvent(OrderEvent event) {
            mOrder = event.getOrder();
        }
    }

    public static class DisconnectEvent extends RemoteEvent {
        public DisconnectEvent(RemoteDevice device) {
            super(device);
        }
    }

    public static class ReadEvent extends RemoteEvent {
        private byte[] mBytes;

        public ReadEvent(RemoteDevice device, byte[] bytes) {
            super(device);
            mBytes = bytes;
        }

        public byte[] getBytes() {
            return mBytes;
        }
    }
}
package com.qg.smartprinter.localorder;

import com.google.gson.Gson;
import com.qg.common.logger.Log;
import com.qg.smartprinter.Injection;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.device.BluetoothDeviceWrapper;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.localorder.event.Events.ConnectEvent;
import com.qg.smartprinter.localorder.event.Events.ConnectedEvent;
import com.qg.smartprinter.localorder.event.Events.ConnectionFailedEvent;
import com.qg.smartprinter.localorder.event.Events.ConnectionLostEvent;
import com.qg.smartprinter.localorder.event.Events.DisconnectEvent;
import com.qg.smartprinter.localorder.event.Events.ReadEvent;
import com.qg.smartprinter.localorder.event.Events.RemoteEvent;
import com.qg.smartprinter.localorder.messages.AbstractMessage;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.BOrderStatus;
import com.qg.smartprinter.localorder.messages.BPrinterStatus;
import com.qg.smartprinter.localorder.messages.BResponse;
import com.qg.smartprinter.localorder.messages.OrderAcceptableResponse;
import com.qg.smartprinter.localorder.messages.WifiAddition;
import com.qg.smartprinter.localorder.util.DebugUtil;
import com.qg.smartprinter.util.rxbus.RxBus;

import rx.functions.Action1;

public class GlobalEventManager {
    private static final String TAG = "GlobalEventManager";

    private static final GlobalEventManager INSTANCE = new GlobalEventManager();

    public static void init() {
        INSTANCE.initial();
    }

    private GlobalEventManager() {
        RxBus.getDefault().asObservable()
                .onBackpressureDrop(new Action1<Object>() {
                    @Override
                    public void call(Object o) {
                        Log.e(TAG, "call: Lost!");
                    }
                })
                .observeOn(Injection.provideBaseSchedulerProvider().computation())
                .subscribe(new Action1<Object>() {
                    @Override
                    public void call(Object o) {
                        processEvent(o);
                    }
                });
    }

    private void initial() {
    }

    private void processEvent(Object e) {
        Log.d(TAG, "processEvent: START:");
        RemoteDevice device = null;
        if (e instanceof RemoteEvent) {
            device = ((RemoteEvent) e).getDevice();
        }
        if (e instanceof DisconnectEvent) {
            device.stop();
            DevicesManager.getInstance().removeDevice(device);
            Log.d(TAG, "processEvent: Disconnect");
        } else if (e instanceof ConnectedEvent) {
            if (device instanceof WifiDevice) {
                PrinterService.getBus().post(new PrinterService.UpdateIPEvent((WifiDevice) device));
            }
            DevicesManager.getInstance().addPrinter(device);
            Log.d(TAG, "processEvent: Connected");
        } else if (e instanceof ConnectEvent) {
            DevicesManager.getInstance().addDevice(device);
            device.connect();
            Log.d(TAG, "processEvent: Connect");
        } else if (e instanceof ReadEvent) {
            processReadEvent((ReadEvent) e);
            Log.d(TAG, "processEvent: ReadEvent" + DebugUtil.getBytesString(((ReadEvent) e).getBytes()));
        } else if (e instanceof ConnectionFailedEvent) {
            DevicesManager.getInstance().removeDevice(device);
            Log.d(TAG, "processEvent: Connect failed!");
        } else if (e instanceof ConnectionLostEvent) {
            DevicesManager.getInstance().removeDevice(device);
            Log.d(TAG, "processEvent: Connect lost!");
        } else {
            Log.d(TAG, "processEvent: Other event!!" + e.getClass().getSimpleName());
        }
    }

    /**
     * 处理收到的报文
     * 1.对于每一条状态报文，发送一次应答(蓝牙)
     * 2.对于收到的订单应答，取消本地的重发任务(蓝牙); 查看队列中是否有任务，若有，则发送
     * 3.更新数据库
     */
    private void processReadEvent(ReadEvent e) {
        byte[] readBytes = e.getBytes();
        RemoteDevice device = e.getDevice();
        AbstractMessage abstractMessage = AbstractMessage.bytesToAbstractStatus(readBytes);

        switch (abstractMessage.getStatusToken()) {
            case BPrinterStatus.TYPE_TOKEN: {
                // 打印机状态
                BPrinterStatus printerStatus = BPrinterStatus.bytesToPrinterStatus(readBytes);
                // 收到的打印机主控板ID
                final long printerId = printerStatus.printerId;
                // 若是蓝牙， 发送应答
                if (device instanceof BluetoothDeviceWrapper) {
                    // 发送应答
                    device.write(BResponse.newCheckedSignal(
                            printerId,
                            BResponse.TOKEN_PRINTER_STATUS,
                            DevicesManager.getInstance().getNextDeviceStatusNumber(device)
                    ));
                }

                // 更新打印机状态（主控板ID及打印单元状态等)
                DevicesManager.getInstance().updateDeviceStatus(device, printerId, printerStatus);

                break;
            }
            case BOrderStatus.TYPE_TOKEN: {
                // 订单状态
                BOrderStatus orderStatus = BOrderStatus.bytesToOrderStatus(readBytes);
                Log.d(TAG, "processReadEvent: 收到订单状态" + new Gson().toJson(orderStatus));

                // 过滤Wifi非本机IP订单状态
                if (device instanceof WifiDevice) {
                    int ip = ((WifiDevice) device).getIP();
                    if (ip != WifiAddition.getIP(orderStatus)) {
                        break;
                    }
                }

                // 收到的打印机主控板ID
                long printerId = orderStatus.getPrinterId();
                // 更新ID
                DevicesManager.getInstance().updateDeviceStatus(device, printerId, null);

                // 若是蓝牙， 发送应答
                if (device instanceof BluetoothDeviceWrapper) {
                    device.write(BResponse.newCheckedSignal(
                            printerId,
                            BResponse.TOKEN_ORDER_STATUS,
                            DevicesManager.getInstance().getNextOrderStatusNumber(device)
                    ));
                }
                // 订单解析错误
                if (orderStatus.getStatus() == BOrderStatus.ORDER_DATA_ERROR
                        || orderStatus.getStatus() == BOrderStatus.ORDER_DATA_ERROR_PRE_EXCEPTION_ORDER) {
                    // 强制结束任务
                    BOrder order = device.forceFinish();
                    if (order != null) {
                        // 重新发送
                        OrderManager.getBus().post(new Events.OrderEvent(device, order, true));
                    }
                    break;
                }
                // 保存报文
                PrinterService.getBus().post(new PrinterService.InsertDBMessageEvent(
                        orderStatus.orderId,
                        readBytes,
                        orderStatus.getStatusString()
                ));
                // 更新订单状态
                PrinterService.getBus().post(new PrinterService.UpdateDBOrderStatusEvent(
                        orderStatus.orderId,
                        String.valueOf(orderStatus.getStatusString())
                ));
                break;
            }
            case BResponse.TYPE_TOKEN: {
                // 应答
                BResponse response = BResponse.bytesToResponse(readBytes);

                // 过滤Wifi非本机IP应答
                if (device instanceof WifiDevice) {
                    int ip = ((WifiDevice) device).getIP();
                    int localIp = WifiAddition.getIP(response);
                    if (ip != localIp) {
                        break;
                    }
                }
                // 完成订单
                finishOrder(response, readBytes, device);
                break;
            }
            case OrderAcceptableResponse.TYPE_TOKEN: {
                // 可接受订单应答
                OrderAcceptableResponse response = OrderAcceptableResponse.bytesToResponse(readBytes);
                if (!(device instanceof WifiDevice)) {
                    return;
                }
                // 过滤Wifi非本机IP应答
                int ip = ((WifiDevice) device).getIP();
                if (ip != response.getIP()) {
                    break;
                }
                // 通知
                ((WifiDevice) device).notifySend();
                break;
            }

        }
    }

    private void finishOrder(BResponse response, byte[] readBytes, RemoteDevice device) {
        // 告知设备任务完成，让其处理
        long responseNum = response.getResponseNum();
        device.finish(responseNum);

        // 更新数据库
        PrinterService.getBus().post(new PrinterService.UpdateDBOrderStatusEvent(
                responseNum,
                Order.RECEIVE_SUCCESS
        ));
        PrinterService.getBus().post(new PrinterService.InsertDBMessageEvent(
                responseNum,
                readBytes,
                Order.RECEIVE_SUCCESS
        ));
    }

}
package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;

import java.util.Arrays;

public class AbstractMessage {
    public int start = 0xCFFC;

    public int flag;

    public long line1;

    public long line2;

    public long line3;

    public int checkSum;

    public int end = 0xFCCF;

    AbstractMessage() {
    }

    public static AbstractMessage bytesToAbstractStatus(byte[] bytes) {
        return new AbstractMessage(bytes);
    }

    public AbstractMessage(byte[] bytes) {
        start = BytesConvert.intFrom2Bytes(Arrays.copyOfRange(bytes, 0, 2));
        flag = BytesConvert.intFrom2Bytes(Arrays.copyOfRange(bytes, 2, 4));
        line1 = BytesConvert.longFrom4Bytes(Arrays.copyOfRange(bytes, 4, 8));
        line2 = BytesConvert.longFrom4Bytes(Arrays.copyOfRange(bytes, 8, 12));
        line3 = BytesConvert.longFrom4Bytes(Arrays.copyOfRange(bytes, 12, 16));
        checkSum = BytesConvert.intFrom2Bytes(Arrays.copyOfRange(bytes, 16, 18));
        end = BytesConvert.intFrom2Bytes(Arrays.copyOfRange(bytes, 18, 20));
    }

    public byte getStatusToken() {
        return (byte) ((flag & 0xFF00) >> (5 + 8)); // >> 13bit
    }

    public void setStatusToken(byte token) {
        flag &= 0x1fff; // 13bit
        flag |= token << (5 + 8); // << 13bit
    }

}
package com.qg.smartprinter.localorder.messages;

/**
 * Created by TZH on 2016/8/7.
 */
public interface BDatagram {
    byte[] toBytes();
}
package com.qg.smartprinter.localorder.messages;

import android.support.annotation.IntDef;

import com.google.gson.Gson;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.localorder.util.CheckSumUtil;

import java.io.Serializable;

/**
 * 订单
 */
public class BOrder implements Serializable {

    public static final int START_ORDER = 0x3E11;
    public int length;
    public long printerId;   // 主控板id
    /**
     * 时间戳/IP地址
     */
    public long stamp;
    public long orderNumber;
    public int bulkId;
    public int inNumber;
    public int checkNum;
    /**
     * 保留字段，代表订单的类型
     */
    public int retainField;

    public byte[] data;
    public int padding;
    public static final int END_ORDER = 0x11E3;

    // 生成时间
    private long generateTime;

    private BOrder() {
        generateTime = System.currentTimeMillis();
    }

    public static BOrder fromOrder(Order order, long printerId) {
        long orderNumber = Integer.valueOf(order.getId());
        byte[] data = new Gson().fromJson(order.getContent(), byte[].class);
        return fromOrderData(orderNumber, data, printerId);
    }

    public static BOrder fromOrderData(long orderNumber, BOrderData orderData, long printerId) {
        byte[] data = orderData.toBytes();
        return fromOrderData(orderNumber, data, printerId);
    }

    public static BOrder fromOrderData(long orderNumber, byte[] data, long printerId) {
        BOrder bo = new BOrder();
        //设置主控板id
        bo.setPrinterId(printerId);
        //设置时间戳
        bo.setStamp(System.currentTimeMillis());
        //设置订单序号
        bo.setOrderNumber(orderNumber);
        //设置批次,批次内序号
        bo.setBulkId((int) (orderNumber >> 16));
        bo.setInNumber((int) orderNumber);
        //设置校验和
        bo.setCheckNum(0);
        //设置数据域,数据长度
        int length = data.length;
        bo.setData(data);
        bo.setLength(length);
        //设置填充
        bo.setPadding(0);
        return bo;
    }


    /**
     * 计算校验和，并转换为字节数组
     */
    public byte[] toRealBytes() {
        checkNum = 0;
        checkNum = CheckSumUtil.checkSum(toBytes());
        return toBytes();
    }

    /**
     * 不作任何处理，转换成字节数组
     */
    private byte[] toBytes() {
        byte[] bytes = new byte[length + 28];
        int position = 0;
        position = BytesConvert.fill2BytesInt(START_ORDER, bytes, position);
        position = BytesConvert.fill2BytesInt(length, bytes, position);
        position = BytesConvert.fill4BytesLong(printerId, bytes, position);
        position = BytesConvert.fill4BytesLong(stamp, bytes, position);
        position = BytesConvert.fill4BytesLong(orderNumber, bytes, position);
        position = BytesConvert.fill2BytesInt(bulkId, bytes, position);
        position = BytesConvert.fill2BytesInt(inNumber, bytes, position);
        position = BytesConvert.fill2BytesInt(checkNum, bytes, position);
        position = BytesConvert.fill2BytesInt(retainField, bytes, position);
        position = BytesConvert.fillByte(data, bytes, position);
        position = BytesConvert.fill2BytesInt(padding, bytes, position);
        BytesConvert.fill2BytesInt(END_ORDER, bytes, position);
        return bytes;
    }

    public long getGenerateTime() {
        return generateTime;
    }

    public long getBytesLength() {
        return length + 28;
    }

    public int getLength() {
        return length;
    }

    public void setLength(int length) {
        this.length = length;
    }

    public long getPrinterId() {
        return printerId;
    }

    public void setPrinterId(long id) {
        this.printerId = id;
    }

    public long getStamp() {
        return stamp;
    }

    public void setStamp(long stamp) {
        this.stamp = stamp;
    }

    public long getOrderNumber() {
        return orderNumber;
    }

    public void setOrderNumber(long orderNumber) {
        this.orderNumber = orderNumber;
    }

    public int getBulkId() {
        return bulkId;
    }

    public void setBulkId(int bulkId) {
        this.bulkId = bulkId;
    }

    public int getInNumber() {
        return inNumber;
    }

    public void setInNumber(int inNumber) {
        this.inNumber = inNumber;
    }

    public int getCheckNum() {
        return checkNum;
    }

    public void setCheckNum(int checkNum) {
        this.checkNum = checkNum;
    }


    @IntDef({NETWORK_ORDER, BT_ORDER, NETWORK_CORR_ORDER, BT_CORR_ORDER, WIFI_ORDER, WIFI_CORR_ORDER})
    @interface RetainField {
    }

    public static final int NETWORK_ORDER = 0x00;
    public static final int BT_ORDER = 0x01;
    public static final int NETWORK_CORR_ORDER = 0x02;
    public static final int BT_CORR_ORDER = 0x03;
    public static final int WIFI_ORDER = 0x04;
    public static final int WIFI_CORR_ORDER = 0x05;

    public static final String NETWORK_ORDER_STR = "网络初始订单";
    public static final String BT_ORDER_STR = "蓝牙初始订单";
    public static final String NETWORK_CORR_ORDER_STR = "网络异常修正订单";
    public static final String BT_CORR_ORDER_STR = "蓝牙异常修正订单";
    public static final String WIFI_ORDER_STR = "Wi-fi初始订单";
    public static final String WIFI_CORR_ORDER_STR = "Wi-fi异常修正订单";
    public static final String UNKNOWN_STR = "未知";

    public void setRetainField(@RetainField int retainField) {
        this.retainField = retainField;
    }

    @RetainField
    public int getRetainField() {
        return retainField;
    }

    public byte[] getData() {
        return data;
    }

    public void setData(byte[] data) {
        this.data = data;
    }

    public int getPadding() {
        return padding;
    }

    public void setPadding(int padding1) {
        this.padding = padding1;
    }


    public static String getTypeString(int retainField) {
        switch (retainField) {
            case NETWORK_ORDER:
                return NETWORK_ORDER_STR;
            case BT_ORDER:
                return BT_ORDER_STR;
            case WIFI_ORDER:
                return WIFI_ORDER_STR;
            case NETWORK_CORR_ORDER:
                return NETWORK_CORR_ORDER_STR;
            case BT_CORR_ORDER:
                return BT_CORR_ORDER_STR;
            case WIFI_CORR_ORDER:
                return WIFI_CORR_ORDER_STR;
            default:
                return UNKNOWN_STR;
        }
    }

    public String getType() {
        return getTypeString(retainField);
    }
}

package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;

import java.util.ArrayList;

/**
 * Created by TZH on 2016/8/7.
 */
public class BOrderData {
    private ArrayList<BDatagram> mBDatagram;
    private String mText;

    public BOrderData() {
        mBDatagram = new ArrayList<>();
    }

    public BOrderData add(BDatagram datagram) {
        if (datagram instanceof BText) {
            mText = ((BText)datagram).getText();
        }
        mBDatagram.add(datagram);
        return this;
    }

    public String getText() {
        return mText;
    }

    public byte[] toBytes() {
        ArrayList<byte[]> list = new ArrayList<>();
        int length = 0;
        for (BDatagram d : mBDatagram) {
            byte[] bytes = d.toBytes();
            list.add(bytes);
            length += bytes.length;
        }
        byte[] result = new byte[length];
        int p = 0;
        for (byte[] bs: list) {
            p = BytesConvert.fillByte(bs, result, p);
        }
        return result;
    }
}
package com.qg.smartprinter.localorder.messages;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * 订单状态
 */
public final class BOrderStatus extends AbstractMessage implements Serializable {

    public static final byte TYPE_TOKEN = (byte) 0b001;  // 类型标志

    private int sta; // 订单状态

    private long printerId;   // 主控板id

    public long seconds;

    public long bulkId;    // 批次id ; 低16bit
    public long inNumber;  // 批次内序号; 高16bit
    public long orderId;

    public static BOrderStatus bytesToOrderStatus(byte[] bytes) {
        AbstractMessage status = AbstractMessage.bytesToAbstractStatus(bytes);
        BOrderStatus bos = new BOrderStatus();
        bos.sta = (bytes[3] & 0xFF);
        bos.flag = status.flag;
        bos.printerId = status.line1;
        bos.seconds = status.line2;
        bos.bulkId = (status.line3 & 0xFFFF);
        bos.inNumber = ((status.line3 >> 16) & 0xFFFF);
        bos.orderId = status.line3;
        bos.checkSum = status.checkSum;
        return bos;
    }

    @Override
    public String toString() {
        return "{ "
                + "主控板ID:" + printerId + ", \n"
                + "订单ID:" + orderId + ", \n"
                + "状态:" + getStatusString() + "\n"
                + " }";
    }

    public long getPrinterId() {
        return printerId;
    }

    public int getStatus() {
        return sta;
    }

    public String getStatusString() {
        return ORDER_STATUS_MAP.get(sta);
    }

    private static final Map<Integer, String> ORDER_STATUS_MAP = new HashMap<>();

    /*
     * a)0为普通订单打印成功
     * b)1为普通订单打印出错：打印机异常
     * c)2为普通订单进入打印队列
     * d)3为普通订单开始打印
     * e)4为普通订单订单数据解析错误
     * f)5为前异常订单打印成功
     * g)6为前异常订单打印出错：打印机异常
     * h)7为前异常订单进入打印队列
     * i)8为前异常订单开始打印
     * j)9为前异常订单数据解析错误
     */
    public static final int PRINT_SUCCESS = 0x00;
    public static final int PRINT_ERROR = 0x01;
    public static final int PRINT_ENQUEUE = 0x02;
    public static final int PRINT_START = 0x03;
    public static final int ORDER_DATA_ERROR = 0x04;
    public static final int PRINT_SUCCESS_PRE_EXCEPTION_ORDER = 0x05;
    public static final int PRINT_ERROR_PRE_EXCEPTION_ORDER = 0x06;
    public static final int PRINT_ENQUEUE_PRE_EXCEPTION_ORDER = 0x07;
    public static final int PRINT_START_PRE_EXCEPTION_ORDER = 0x08;
    public static final int ORDER_DATA_ERROR_PRE_EXCEPTION_ORDER = 0x09;

    static {
        ORDER_STATUS_MAP.put(PRINT_SUCCESS, "打印成功");
        ORDER_STATUS_MAP.put(PRINT_ERROR, "打印出错");
        ORDER_STATUS_MAP.put(PRINT_ENQUEUE, "进入打印队列");
        ORDER_STATUS_MAP.put(PRINT_START, "开始打印");
        ORDER_STATUS_MAP.put(ORDER_DATA_ERROR, "订单数据解析错误");

        ORDER_STATUS_MAP.put(PRINT_SUCCESS_PRE_EXCEPTION_ORDER, "前异常订单打印成功");
        ORDER_STATUS_MAP.put(PRINT_ERROR_PRE_EXCEPTION_ORDER, "前异常订单打印出错");
        ORDER_STATUS_MAP.put(PRINT_ENQUEUE_PRE_EXCEPTION_ORDER, "前异常订单进入打印队列");
        ORDER_STATUS_MAP.put(PRINT_START_PRE_EXCEPTION_ORDER, "前异常订单开始打印");
        ORDER_STATUS_MAP.put(ORDER_DATA_ERROR_PRE_EXCEPTION_ORDER, "前异常订单数据解析错误");
    }

}
package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.util.BinaryUtil;

/**
 * 图片
 */
public final class BPhoto implements BDatagram{

    public static final short START = (short) 0xFF7E;
    public static final short END = (short) 0x7EFF;

    public int length;

    public byte[] data;

    public int contentLength; // 图片内容实际字节数

    public BPhoto(byte[] bytes) {
        this.contentLength = bytes.length;
        this.data = BytesConvert.getFilledBytes(bytes);
        this.length = this.data.length;
    }


    /**
     * 从RGB图像得到封装后的表单
     */
    public static BPhoto fromPixels(int[][] pixels) {
        return new BPhoto(BinaryUtil.getDatagram(pixels));
    }

    @Override
    public byte[] toBytes() {
        byte[] bytes = new byte[length + 8];
        int position = 0;
        position = BytesConvert.fill2BytesInt(START, bytes, position);
        position = BytesConvert.fill2BytesInt(length, bytes, position);
        position = BytesConvert.fillByte(data, bytes, position);
        position = BytesConvert.fill2BytesInt(contentLength, bytes, position);
        BytesConvert.fill2BytesInt(END, bytes, position);

        return bytes;
    }


}
package com.qg.smartprinter.localorder.messages;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * 打印机状态
 */
public class BPrinterStatus extends AbstractMessage implements Serializable {

    public static final byte TYPE_TOKEN = (byte) 0b010;  // 类型标志

    public int sta;
    // line1
    public long printerId; // 主控板id
    // line2
    public long seconds;   // 发送给服务器的时间戳
    // line3
    public long number;    // 主控板打印单元序号

    public static BPrinterStatus bytesToPrinterStatus(byte[] bytes) {
        AbstractMessage status = AbstractMessage.bytesToAbstractStatus(bytes);

        BPrinterStatus bps = new BPrinterStatus();

        bps.sta = (short) (bytes[3] & (short) 0xFF);

        bps.printerId = status.line1;

        bps.seconds = status.line2;

        bps.number = status.line3;

        bps.checkSum = status.checkSum;

        return bps;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        return sb.append("{ ")
                .append("主控板ID:").append(printerId).append(", ").append("\n")
                .append("打印单元序号:").append(number).append(", ").append("\n")
                .append("状态:").append(getStatusString()).append("\n")
                .append(" }")
                .toString();
    }

    public String getStatusString() {
        return PRINTER_STATUS_MAP.get(sta);
    }


    public static final Map<Integer, String> PRINTER_STATUS_MAP = new HashMap<>();

    public static final int KNIFE_ERR = 0x01;
    public static final int BOX_OPEN = 0x02;
    public static final int PAPER_GOING_END = 0x03;
    public static final int PAPER_IN = 0x04;
    public static final int MOVEMENT_HIGH_TEMP = 0x05;
    public static final int MOVEMENT_BURN = 0x06;
    public static final int NORMAL = 0x07;
    public static final int NORMAL_BUF_FULL = 0x0C;
    public static final int FAST_BUF_FULL = 0x0D;
    public static final int HEALTH = 0x0E;
    public static final int SECOND_HEALTH = 0x0F;
    public static final int NOT_HEALTH = 0x10;

    static {
        PRINTER_STATUS_MAP.put(KNIFE_ERR, "切刀错误");
        PRINTER_STATUS_MAP.put(BOX_OPEN, "机盒打开");
        PRINTER_STATUS_MAP.put(PAPER_GOING_END, "纸将用尽");
        PRINTER_STATUS_MAP.put(PAPER_IN, "正在进纸");
        PRINTER_STATUS_MAP.put(MOVEMENT_HIGH_TEMP, "机芯高温");
        PRINTER_STATUS_MAP.put(MOVEMENT_BURN, "机芯烧毁");
        PRINTER_STATUS_MAP.put(NORMAL, "正常状态");
        PRINTER_STATUS_MAP.put(0x08, "待定");
        PRINTER_STATUS_MAP.put(0x09, "待定");
        PRINTER_STATUS_MAP.put(0x0A, "待定");
        PRINTER_STATUS_MAP.put(0x0B, "待定 ");
        PRINTER_STATUS_MAP.put(NORMAL_BUF_FULL, "普通缓冲区满");
        PRINTER_STATUS_MAP.put(FAST_BUF_FULL, "加急缓冲区满");
        PRINTER_STATUS_MAP.put(HEALTH, "健康状态");
        PRINTER_STATUS_MAP.put(SECOND_HEALTH, "亚健康状态");
        PRINTER_STATUS_MAP.put(NOT_HEALTH, "不健康");
    }

}
package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.localorder.util.Charsets;

/**
 * 二维码
 */
public final class BQRCode implements BDatagram {

    public static final int START = (short) 0x7FFF;
    public static final int PADDING = (short) 0;
    public static final int END = (short) 0xFF7F;

    private int length;
    private byte[] data;

    public BQRCode(String text) {
        this(text.getBytes(Charsets.URL_QR_CODE_CHARSET));
    }

    public BQRCode(byte[] bytes) {
        this.data = BytesConvert.getFilledBytes(bytes);
        this.length = (short) this.data.length;
    }

    @Override
    public byte[] toBytes() {
        byte[] bytes = new byte[length + 8];

        int position = 0;
        position = BytesConvert.fill2BytesInt(START, bytes, position);
        position = BytesConvert.fill2BytesInt(length, bytes, position);
        position = BytesConvert.fillByte(data, bytes, position);
        position = BytesConvert.fill2BytesInt(PADDING, bytes, position);
        BytesConvert.fill2BytesInt(END, bytes, position);

        return bytes;
    }

}
package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.localorder.util.CheckSumUtil;
import com.qg.smartprinter.util.NetworkUtils;

/**
 * 状态应答（本地应答）
 * Created by TZH on 2016/7/30.
 */
public class BResponse extends AbstractMessage {

    public static final byte TYPE_TOKEN = (byte) 0b101; // 类型标志

    public static final int TOKEN_PRINTER_STATUS = 1;

    public static final int TOKEN_ORDER_STATUS = 0;

    public static final int BYTE_COUNT = 5 * 4;

    public long printerId; // 主控板id

    public long responseType;// 应答类型

    public long responseNum; //应答序号

    public BResponse(long printerId, long responseType, long responseNum) {
        this.printerId = printerId;
        this.responseType = responseType;
        this.responseNum = responseNum;
        this.checkSum = 0;
        setStatusToken(TYPE_TOKEN);
    }

    public byte[] toRealBytes() {
        checkSum = 0;
        checkSum = CheckSumUtil.checkSum(toBytes());
        return toBytes();
    }

    private byte[] toBytes() {
        byte[] bytes = new byte[BYTE_COUNT];
        int position = 0;
        position = BytesConvert.fill2BytesInt(start, bytes, position);
        position = BytesConvert.fill2BytesInt(flag, bytes, position);
        position = BytesConvert.fill4BytesLong(printerId, bytes, position);
        position = BytesConvert.fill4BytesLong(responseType, bytes, position);
        position = BytesConvert.fill4BytesLong(responseNum, bytes, position);
        position = BytesConvert.fill2BytesInt(checkSum, bytes, position);
        BytesConvert.fill2BytesInt(end, bytes, position);
        return bytes;
    }

    public static BResponse bytesToResponse(byte[] bytes) {
        AbstractMessage status = AbstractMessage.bytesToAbstractStatus(bytes);
        BResponse response = new BResponse(status.line1, status.line2, status.line3);
        response.checkSum = status.checkSum;
        return response;

    }

    public static byte[] newCheckedSignal(long printerId, long responseType, long responseNum) {
        BResponse response = new BResponse(printerId, responseType, responseNum);
        return (response.toRealBytes());
    }

    @Override
    public String toString() {
        return "{ "
                + "主控板ID:" + printerId + ", "
                + "应答类型:" + getResponseTypeString() + ", "
                + "应答编号:" + responseNum
                + " }";
    }

    public long getResponseType() {
        return responseType;
    }

    public long getResponseNum() {
        return responseNum;
    }

    public String getResponseTypeString() {
        switch ((int) responseType) {
            case TOKEN_ORDER_STATUS:
                return "订单状态";
            case TOKEN_PRINTER_STATUS:
                return "打印机状态";
            default:
                return "IP?" + NetworkUtils.intToInetAddress((int) responseType);
        }
    }

}
package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.localorder.util.Charsets;

/**
 * 文本
 */
public final class BText implements BDatagram{

    public static final int START= (short) 0x7EFF;
    public static final int END= (short) 0xFF7E;
    private String mText;

    public int length;

    public byte[] data;

    public int padding;

    public BText(String text) {
        this((text + "\n").getBytes(Charsets.PRINTER_CHARSET));
        mText = text;
    }

    private BText(byte[] bytes) {
        this.data = BytesConvert.getFilledBytes(bytes);
        this.length = (short) this.data.length;
    }

    @Override
    public byte[] toBytes() {
        byte[] bytes = new byte[length + 8];

        int position = 0;

        position = BytesConvert.fill2BytesInt(START, bytes, position);

        position = BytesConvert.fill2BytesInt(length, bytes, position);

        position = BytesConvert.fillByte(data, bytes, position);

        position = BytesConvert.fill2BytesInt(padding, bytes, position);

        BytesConvert.fill2BytesInt(END, bytes, position);

        return bytes;
    }

    public String getText() {
        return mText;
    }
}
package com.qg.smartprinter.localorder.messages;

import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.localorder.util.CheckSumUtil;

import static com.qg.smartprinter.localorder.messages.BResponse.BYTE_COUNT;

/**
 * @author TZH
 * @version 1.0
 */
public class OrderAcceptableResponse extends AbstractMessage {

    public static final byte TYPE_TOKEN = (byte) 0b111; // 类型标志

    private long printerId; // 主控板ID

    private long ip;

    private long retain; // 保留字段

    public OrderAcceptableResponse(byte[] bytes) {
        super(bytes);
        printerId = line1;
        ip = line2;
        retain = line3;
    }

    public byte[] toRealBytes() {
        checkSum = 0;
        checkSum = CheckSumUtil.checkSum(toBytes());
        return toBytes();
    }

    private byte[] toBytes() {
        byte[] bytes = new byte[BYTE_COUNT];
        int position = 0;
        position = BytesConvert.fill2BytesInt(start, bytes, position);
        position = BytesConvert.fill2BytesInt(flag, bytes, position);
        position = BytesConvert.fill4BytesLong(printerId, bytes, position);
        position = BytesConvert.fill4BytesLong(ip, bytes, position);
        position = BytesConvert.fill4BytesLong(retain, bytes, position);
        position = BytesConvert.fill2BytesInt(checkSum, bytes, position);
        BytesConvert.fill2BytesInt(end, bytes, position);
        return bytes;
    }

    public static OrderAcceptableResponse bytesToResponse(byte[] readBytes) {
        return new OrderAcceptableResponse(readBytes);
    }

    public int getIP() {
        return (int) ip;
    }
}
package com.qg.smartprinter.localorder.messages;

/**
 * Wifi报文处理器
 */
public class WifiAddition {
    /**
     * Transfer order to wifi order. This method would change the parameter.
     */
    public static BOrder toWifiOrder(BOrder order, int ip) {
        order.stamp = ip;
        return order;
    }

    public static int getIP(BOrderStatus wifiOrderStatus) {
        return (int) wifiOrderStatus.seconds;
    }

    public static int getIP(BResponse wifiStatusResponse) {
        return (int) wifiStatusResponse.responseType;
    }
}

package com.qg.smartprinter.localorder.messages;

import android.support.annotation.VisibleForTesting;

import com.qg.smartprinter.localorder.util.BytesConvert;
import com.qg.smartprinter.localorder.util.CheckSumUtil;

import static com.qg.smartprinter.localorder.messages.BResponse.BYTE_COUNT;

/**
 * @author TZH
 * @version 1.0
 */
public class WifiOrderRequest extends AbstractMessage {

    public static final byte TYPE_TOKEN = (byte) 0b110; // 类型标志

    private long orderTime; // 订单生成时间

    private int ip;

    private long orderLength; // 请求订单长度

    public WifiOrderRequest(long orderTime, int ip, long orderLength) {
        this.orderTime = orderTime;
        this.ip = ip;
        this.orderLength = orderLength;
        setStatusToken(TYPE_TOKEN);
    }

    public static WifiOrderRequest fromOrder(BOrder order, int ip) {
        return new WifiOrderRequest(order.getGenerateTime(), ip, order.getBytesLength());
    }

    public static byte[] newRequestSignal(BOrder order, int ip) {
        WifiOrderRequest request = fromOrder(order, ip);
        return (request.toRealBytes());
    }


    public byte[] toRealBytes() {
        checkSum = 0;
        checkSum = CheckSumUtil.checkSum(toBytes());
        return toBytes();
    }

    @VisibleForTesting
    public byte[] toBytes() {
        byte[] bytes = new byte[BYTE_COUNT];
        int position = 0;
        position = BytesConvert.fill2BytesInt(start, bytes, position);
        position = BytesConvert.fill2BytesInt(flag, bytes, position);
        position = BytesConvert.fill4BytesLong(orderTime, bytes, position);
        position = BytesConvert.fill4BytesLong(ip, bytes, position);
        position = BytesConvert.fill4BytesLong(orderLength, bytes, position);
        position = BytesConvert.fill2BytesInt(checkSum, bytes, position);
        BytesConvert.fill2BytesInt(end, bytes, position);
        return bytes;
    }

}
package com.qg.smartprinter.localorder;

import com.qg.common.logger.Log;
import com.qg.smartprinter.Injection;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.device.BluetoothDeviceWrapper;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.WifiAddition;
import com.qg.smartprinter.util.SharedPreferencesUtils;
import com.qg.smartprinter.util.rxbus.RxBus;

import rx.Subscription;
import rx.functions.Action1;
import rx.subscriptions.CompositeSubscription;

/**
 * 订单管理器
 */
public class OrderManager {
    private static final String TAG = "OrderManager";

    private int mOrderNumber = 0;

    private RxBus mBus;

    private CompositeSubscription mSubscriptions;

    private static OrderManager sInstance = new OrderManager();

    public static OrderManager getInstance() {
        return sInstance;
    }

    private OrderManager() {
        mBus = new RxBus();
        mSubscriptions = new CompositeSubscription();
    }

    public OrderManager init() {
        mSubscriptions.clear();
        Subscription subscription = mBus.asObservable()
                .onBackpressureBuffer()
                .onBackpressureDrop(new Action1<Object>() {
                    @Override
                    public void call(Object o) {
                        Log.e(TAG, "call: Order Lost!!" + o.getClass().getSimpleName());
                        if (o instanceof Events.OrderEvent) {
                            RxBus.getDefault().post(new Events.OrderLostEvent(((Events.OrderEvent) o)));
                        }
                    }
                })
                .observeOn(Injection.provideBaseSchedulerProvider().computation())
                .subscribe(new Action1<Object>() {
                    @Override
                    public void call(Object e) {
                        if (e instanceof Events.OrderEvent) {
                            // 下单事件
                            Events.OrderEvent event = (Events.OrderEvent) e;
                            BOrder o = event.getOrder();
                            RemoteDevice device = event.getDevice();
                            // Check
                            if (device == null) {
                                return;
                            }
                            if (device instanceof WifiDevice) {
                                int ip = ((WifiDevice) device).getIP();
                                WifiAddition.toWifiOrder(o, ip);
                                if (event.isCorrected()) {
                                    // 修改订单类型
                                    PrinterService.getBus().post(
                                            new PrinterService.UpdateDBOrderTypeEvent(
                                                    event.getOrder().getOrderNumber(),
                                                    BOrder.WIFI_CORR_ORDER_STR
                                            ));
                                    o.setRetainField(BOrder.WIFI_CORR_ORDER);
                                } else {
                                    o.setRetainField(BOrder.WIFI_ORDER);
                                }
                            } else if (device instanceof BluetoothDeviceWrapper) {
                                if (event.isCorrected()) {
                                    // 修改订单类型
                                    PrinterService.getBus().post(
                                            new PrinterService.UpdateDBOrderTypeEvent(
                                                    event.getOrder().getOrderNumber(),
                                                    BOrder.BT_CORR_ORDER_STR
                                            ));
                                    o.setRetainField(BOrder.BT_CORR_ORDER);
                                } else {
                                    o.setRetainField(BOrder.BT_ORDER);
                                }
                            } else {
                                Log.e(TAG, "Unknown device type!");
                            }
                            // 如果不是修正订单
                            if (!event.isCorrected()) {
                                Order order = Order.fromBOrder(o);
                                // 添加到数据库
                                PrinterService.getBus().post(
                                        new PrinterService.InsertDBOrderEvent(order));
                            }

                            // 添加到队列
                            DevicesManager.getInstance().sendOrder(device, o);
                        }
                    }
                });
        mSubscriptions.add(subscription);
        return this;
    }

    public int getNextOrderNumber() {
        int nextOrderNumber = ++mOrderNumber;
        // Save
        SharedPreferencesUtils.getInstance().setOrderNumber(nextOrderNumber);
        return nextOrderNumber;
    }

    public void resetOrderNumber() {
        mOrderNumber = 0;
    }

    public static RxBus getBus() {
        return getInstance().mBus;
    }

    public void setOrderNumber(int orderNumber) {
        mOrderNumber = orderNumber;
    }
}
package com.qg.smartprinter.localorder;

import com.qg.smartprinter.localorder.device.BluetoothDeviceWrapper;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.localorder.messages.BPrinterStatus;

import java.util.HashMap;
import java.util.Map;

public class Printer {

    private int id;

    private long printerId;

    private String name;

    private String address;

    private Map<Long, Integer> unitsStatus = new HashMap<>();

    private RemoteDevice device;

    public Printer(int id, String name, String address, RemoteDevice device) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.device = device;
    }

    public RemoteDevice getDevice() {
        return device;
    }

    public void setDevice(RemoteDevice device) {
        this.device = device;
    }

    public void setPrinterId(long printerId) {
        this.printerId = printerId;
    }

    public long getPrinterId() {
        return printerId;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getId() {
        return id + device.getAddress();
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public String getStatusString() {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<Long, Integer> status : unitsStatus.entrySet()) {
            sb.append("打印单元")
                    .append(status.getKey())
                    .append(":")
                    .append(BPrinterStatus.PRINTER_STATUS_MAP.get(status.getValue()))
                    .append("\n");
        }
        return sb.toString();
    }

    public void updateStatus(BPrinterStatus status) {
        if (unitsStatus == null) {
            unitsStatus = new HashMap<>();
        }
        unitsStatus.put(status.number, status.sta);
    }

    public String getConnectMethod() {
        if (device instanceof BluetoothDeviceWrapper) {
            return "蓝牙";
        } else if (device instanceof WifiDevice) {
            return "WIFI";
        } else {
            return "未知";
        }
    }
}
package com.qg.smartprinter.localorder;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.net.wifi.WifiManager;
import android.os.IBinder;
import android.support.annotation.Nullable;

import com.qg.common.logger.Log;
import com.qg.smartprinter.Injection;
import com.qg.smartprinter.data.source.Message;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.data.source.OrdersDataSource;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.util.DateUtils;
import com.qg.smartprinter.util.rxbus.RxBus;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;

import rx.functions.Action1;

public class PrinterService extends Service {
    private static final String TAG = "PrinterService";

    private OrdersDataSource mOrdersRepository;

    private static RxBus sBus = new RxBus();

    public static RxBus getBus() {
        return sBus;
    }

    public static void start(Context context) {
        Intent starter = new Intent(context, PrinterService.class);
        context.startService(starter);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        mOrdersRepository = Injection.provideOrdersRepository(getApplicationContext());

        BaseSchedulerProvider schedulerProvider = Injection.provideBaseSchedulerProvider();
        sBus.asObservable()
                .onBackpressureBuffer()
                .onBackpressureDrop(new Action1<Object>() {
                    @Override
                    public void call(Object o) {
                        Log.d(TAG, "Lost event!!");
                    }
                })
                .observeOn(schedulerProvider.computation())
                .subscribe(new Action1<Object>() {
                    @Override
                    public void call(Object o) {
                        if (o instanceof InsertDBMessageEvent) {
                            InsertDBMessageEvent event = (InsertDBMessageEvent) o;
                            insertDBMessage(event.orderId, event.readBuf, event.type);
                        } else if (o instanceof InsertDBOrderEvent) {
                            InsertDBOrderEvent event = (InsertDBOrderEvent) o;
                            insertDBOrder(event.order);
                        } else if (o instanceof UpdateDBOrderStatusEvent) {
                            UpdateDBOrderStatusEvent event = ((UpdateDBOrderStatusEvent) o);
                            updateDBOrder(event.orderId, event.statusString);
                        } else if (o instanceof UpdateIPEvent) {
                            UpdateIPEvent event = (UpdateIPEvent) o;
                            WifiManager m = (WifiManager) getSystemService(WIFI_SERVICE);
                            int ipAddress = m.getConnectionInfo().getIpAddress();
                            event.mDevice.setIP(ipAddress);
                        }
                    }
                });

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        mOrdersRepository = null;
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    /**
     * 在数据库中插入订单
     */
    private void insertDBOrder(Order order) {
        mOrdersRepository.sendOrder(order);
    }

    /**
     * 在数据库中更新订单状态
     */
    private void updateDBOrder(long orderId, String statusString) {
        mOrdersRepository.updateOrder(String.valueOf(orderId), statusString);
    }

    /**
     * 在数据库中插入报文
     */
    private void insertDBMessage(long orderId, byte[] readBuf, String type) {
        Message message = new Message(readBuf, type, DateUtils.getDateString(), String.valueOf(orderId));
        mOrdersRepository.receiveMessage(message);
    }

    public static class InsertDBOrderEvent {
        Order order;

        InsertDBOrderEvent(Order o) {
            this.order = o;
        }
    }

    public static class UpdateDBOrderStatusEvent {
        long orderId;
        String statusString;

        public UpdateDBOrderStatusEvent(long orderId, String statusString) {
            this.orderId = orderId;
            this.statusString = statusString;
        }
    }

    public static class UpdateDBOrderTypeEvent {
        long orderId;
        String type;

        public UpdateDBOrderTypeEvent(long orderId, String type) {
            this.orderId = orderId;
            this.type = type;
        }
    }

    public static class InsertDBMessageEvent {
        long orderId;
        byte[] readBuf;
        String type;

        public InsertDBMessageEvent(long orderId, byte[] readBuf, String type) {
            this.orderId = orderId;
            this.readBuf = readBuf;
            this.type = type;
        }
    }

    public static class UpdateIPEvent {
        WifiDevice mDevice;

        public UpdateIPEvent(WifiDevice device) {
            mDevice = device;
        }
    }
}

package com.qg.smartprinter.localorder;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ViewAnimator;

import com.qg.common.logger.Linkable;
import com.qg.common.logger.LogFragment;
import com.qg.common.logger.LogView;
import com.qg.smartprinter.ui.BaseActivity;
import com.qg.smartprinter.R;

/**
 * 测试
 */
public abstract class PrinterTestActivity extends BaseActivity {
    public static final String TAG = "PrinterTestActivity";

    private LogFragment mLogFragment;
    private PrinterTestFragment mBluetoothPrinterFragment;
    private View mLogContainer;

    public static void start(Context context) {
        Intent starter = new Intent(context, PrinterTestActivity.class);
        context.startActivity(starter);
    }

    // Whether the Log Fragment is currently shown
    private boolean mLogShown = true;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.printer_test_activity);
        mLogContainer = findViewById(R.id.sample_output);
        supportInvalidateOptionsMenu();
        changeLog();

        if (savedInstanceState == null) {
            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
            mBluetoothPrinterFragment = getPrinterTestFragment();
            transaction.replace(R.id.sample_content_fragment, mBluetoothPrinterFragment);
            transaction.commit();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_log, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.show_or_hide_log: {
                mLogShown = !mLogShown;
                changeLog();
                return true;
            }
        }
        return false;
    }

    private void changeLog() {
        if (mLogShown) {
            mLogContainer.setVisibility(View.VISIBLE);
        } else {
            mLogContainer.setVisibility(View.GONE);
        }

    }

    protected abstract PrinterTestFragment getPrinterTestFragment();

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.clear_log:
                mLogFragment.clearLog();
                if (mBluetoothPrinterFragment != null) {
                    mBluetoothPrinterFragment.clear();
                }

                break;
            case R.id.scroll_bottom:
                mLogFragment.fullScroll(View.FOCUS_DOWN);
                if (mBluetoothPrinterFragment != null) {
                    mBluetoothPrinterFragment.bottom();
                }
                break;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        initializeLogging();
    }

    @Override
    protected void onStart() {
        super.onStart();
        initializeLogging();
    }

    @Override
    public Linkable initializeLogging() {
        Linkable node = super.initializeLogging();

        // On screen logging via a fragment with a TextView.
        mLogFragment = (LogFragment) getSupportFragmentManager()
                .findFragmentById(R.id.log_fragment);
        LogView logView = mLogFragment.getLogView();

        node.setNext(logView);

        return logView;
    }
}
package com.qg.smartprinter.localorder;

import android.os.Bundle;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.jakewharton.rxbinding.view.RxView;
import com.qg.smartprinter.Injection;
import com.qg.smartprinter.R;
import com.qg.smartprinter.dummy.OrderDummy;
import com.qg.smartprinter.localorder.AutoOrdersContainer.AutoOrder;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.localorder.messages.AbstractMessage;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.localorder.messages.BOrderStatus;
import com.qg.smartprinter.localorder.messages.BPrinterStatus;
import com.qg.smartprinter.localorder.messages.BResponse;
import com.qg.smartprinter.localorder.status.localstatus.LocalStatusActivity;
import com.qg.smartprinter.ui.BaseFragment;
import com.qg.smartprinter.util.rxbus.RxBus;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;

import java.util.List;
import java.util.concurrent.TimeUnit;

import rx.Observable;
import rx.Subscription;
import rx.functions.Action1;
import rx.functions.Func1;
import rx.functions.Func2;
import rx.subscriptions.CompositeSubscription;

/**
 * 测试界面
 */
public abstract class PrinterTestFragment extends BaseFragment {

    private ListView mConversationView;

    private EditText mBytesEditText;

    private EditText mNumEditText;

    private CheckBox mQRCodeCheckBox;

    private CheckBox mPhotoCheckBox;

    private CheckBox mShuffleCheckBox;

    private String mConnectedDeviceName = null;

    private ArrayAdapter<String> mConversationArrayAdapter;

    private TextView mStatusView;

    private TextView mAutoMsgView;

    private TextView mAutoNumbersView;

    private AutoOrdersContainer mAutoOrdersContainer = new AutoOrdersContainer();

    private CompositeSubscription mSubscriptions;

    private BaseSchedulerProvider mSchedulerProvider;

    private int mTotalNum;
    private int mReceiveNum;

    public void clear() {
        mConversationArrayAdapter.clear();
    }

    public void bottom() {
        mConversationView.smoothScrollToPosition(mConversationArrayAdapter.getCount() - 1);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);
        mSubscriptions = new CompositeSubscription();
        addDefaultAutoOrders();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_printer_test, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        mConversationView = (ListView) view.findViewById(R.id.in);
        mStatusView = (TextView) view.findViewById(R.id.status);
        mAutoMsgView = (TextView) view.findViewById(R.id.auto_order_message);
        mAutoNumbersView = (TextView) view.findViewById(R.id.auto_order_numbers);
        mBytesEditText = (EditText) view.findViewById(R.id.edit_text_bytes);
        mNumEditText = (EditText) view.findViewById(R.id.edit_text_num);
        mPhotoCheckBox = (CheckBox) view.findViewById(R.id.checkbox_photo);
        mShuffleCheckBox = (CheckBox) view.findViewById(R.id.checkbox_shuffle);
        mQRCodeCheckBox = (CheckBox) view.findViewById(R.id.checkbox_url_qr_code);

        // Initialize the array adapter for the conversation thread
        mConversationArrayAdapter = new ArrayAdapter<>(getActivity(), R.layout.message);

        mConversationView.setAdapter(mConversationArrayAdapter);

        updateAutoOrderStatus(0, 0);
        RxView.clicks(view.findViewById(R.id.button_send))
                .subscribe(new Action1<Void>() {
                    @Override
                    public void call(Void aVoid) {
                        autoOrder();
                    }
                });
        RxView.clicks(view.findViewById(R.id.auto_order_minus))
                .subscribe(new Action1<Void>() {
                    @Override
                    public void call(Void aVoid) {
                        mAutoOrdersContainer.remove();
                        updateAutoOrderNumbers();
                    }
                });

        RxView.clicks(view.findViewById(R.id.auto_order_add))
                .subscribe(new Action1<Void>() {
                    @Override
                    public void call(Void aVoid) {
                        try {
                            mAutoOrdersContainer.addAutoOther(
                                    parseInt(mBytesEditText.getText().toString(), "字节数有误！"),
                                    parseInt(mNumEditText.getText().toString(), "份数有误！")
                            );
                            updateAutoOrderNumbers();
                        } catch (NumberFormatException e) {
                            Toast.makeText(getContext(), e.getMessage(), Toast.LENGTH_SHORT).show();
                        }
                    }
                });

        mAutoNumbersView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                mAutoOrdersContainer.reset();
                updateAutoOrderNumbers();
                return true;
            }
        });
        updateStatus();
        updateAutoOrderNumbers();
    }

    private int parseInt(String s, String message) throws NumberFormatException {
        try {
            return Integer.valueOf(s);
        } catch (NumberFormatException e) {
            throw new NumberFormatException(message);
        }
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mSchedulerProvider = Injection.provideBaseSchedulerProvider();
    }

    private static final AutoOrder[] DEFAULT_AUTO_ORDERS = {
            new AutoOrder(1000, 1),
//            new AutoOrder(2000, 4),
//            new AutoOrder(4000, 4),
//            new AutoOrder(10000, 2),
    };

    private void addDefaultAutoOrders() {
        if (mAutoOrdersContainer.getAutoOrderList().isEmpty()) {
            for (AutoOrder autoOrder : DEFAULT_AUTO_ORDERS) {
                mAutoOrdersContainer.addAutoOther(autoOrder);
            }
        }
    }

    private void autoOrder() {
        if (!hasDevice()) {
            Toast.makeText(getContext(), R.string.title_not_connected, Toast.LENGTH_SHORT).show();
            return;
        }
        final List<Integer> orders = mAutoOrdersContainer.getOrders(mShuffleCheckBox.isChecked());

        mReceiveNum = 0;
        mTotalNum = orders.size();
        updateAutoOrderStatus(mTotalNum, mReceiveNum);

        Observable.just(orders)
                .flatMapIterable(new Func1<List<Integer>, Iterable<Integer>>() {
                    @Override
                    public Iterable<Integer> call(List<Integer> integers) {
                        return integers;
                    }
                })
                .zipWith(Observable.interval(500, TimeUnit.MILLISECONDS), new Func2<Integer, Long, Integer>() {
                    @Override
                    public Integer call(Integer o, Long aLong) {
                        return o;
                    }
                }) // Emmit one order per 0.5s
                .observeOn(Injection.provideBaseSchedulerProvider().computation())
                .subscribe(new Action1<Integer>() {
                    @Override
                    public void call(Integer order) {
                        BOrder bOrder = OrderDummy.generateOrder(
                                mPhotoCheckBox.isChecked(),
                                order,
                                mQRCodeCheckBox.isChecked());
                        OrderManager.getBus().post(new Events.OrderEvent(getDevice(), bOrder));
                    }
                });
    }

    void updateAutoOrderNumbers() {
        mAutoNumbersView.setText(null);
        for (AutoOrder autoOrder : mAutoOrdersContainer.getAutoOrderList()) {
            mAutoNumbersView.append(autoOrder.toString());
            mAutoNumbersView.append(";");
        }
    }

    private void updateAutoOrderStatus(int total, int current) {
        mAutoMsgView.setText(getString(R.string.auto_order_status_format, current, total));
    }

    protected void setStatus(int resId) {
        mStatusView.setText(resId);
    }

    protected void updateStatus() {
        int state = getState();
        switch (state) {
            case RemoteDevice.STATE_CONNECTED:
                mConnectedDeviceName = getDevice().getName();
                mStatusView.setText(getString(R.string.title_connected_to, mConnectedDeviceName));
                break;
            case RemoteDevice.STATE_CONNECTING:
                setStatus(R.string.title_connecting);
                break;
            case RemoteDevice.STATE_NONE:
                setStatus(R.string.title_not_connected);
                break;
        }
    }

    public int getState() {
        if (hasDevice()) {
            return getDevice().getState();
        }
        return RemoteDevice.STATE_NONE;
    }

    private void successSendOrder(BResponse response) {
        updateAutoOrderStatus(mTotalNum, ++mReceiveNum);
        mConversationArrayAdapter.add("收到应答！\n" +
                mConnectedDeviceName + ": " + response
        );
    }

    private void updatePrinterStatus(BPrinterStatus bPrinterStatus) {
        mConversationArrayAdapter.add("收到打印机状态：\n" +
                bPrinterStatus
        );
    }

    private void updateOrderStatus(BOrderStatus bOrderStatus) {
        mConversationArrayAdapter.add("收到订单状态：\n" +
                bOrderStatus
        );
    }

    @Override
    public void onResume() {
        super.onResume();
        Subscription orderSubscription = RxBus.getDefault().asObservable()
                .onBackpressureDrop() // Guard against uncontrollable frequency of upstream emissions.
                .observeOn(mSchedulerProvider.ui())
                .subscribe(new Action1<Object>() {
                    @Override
                    public void call(Object e) {
                        if (e instanceof Events.StateChangeEvent) {
                            updateStatus();
                        } else if (e instanceof Events.ConnectionFailedEvent) {
                            Toast.makeText(getContext(), getContext().getString(R.string.connect_fail),
                                    Toast.LENGTH_SHORT).show();
                        } else if (e instanceof Events.ConnectionLostEvent) {
                            Toast.makeText(getContext(), getContext().getString(R.string.connect_lost),
                                    Toast.LENGTH_SHORT).show();
                        } else if (e instanceof Events.ConnectedEvent) {
                            mConnectedDeviceName = ((Events.ConnectedEvent) e).getDevice().getName();
                            Toast.makeText(getContext(), getString(R.string.title_connected_to, mConnectedDeviceName),
                                    Toast.LENGTH_SHORT).show();
                        } else if (e instanceof Events.ReadEvent) {
                            byte[] bytes = ((Events.ReadEvent) e).getBytes();
                            processReadBytes(bytes);
                        } else if (e instanceof Events.OrderLostEvent) {
                            Toast.makeText(getContext(), R.string.order_lost, Toast.LENGTH_SHORT).show();
                        }
                    }
                });

        mSubscriptions.add(orderSubscription);
    }

    // 仅限于更新界面，显示出已收到信息
    private void processReadBytes(byte[] readBuf) {
        AbstractMessage abstractMessage = AbstractMessage.bytesToAbstractStatus(readBuf);
        switch (abstractMessage.getStatusToken()) {
            case BPrinterStatus.TYPE_TOKEN:
                BPrinterStatus bPrinterStatus = BPrinterStatus.bytesToPrinterStatus(readBuf);
                updatePrinterStatus(bPrinterStatus);
                break;
            case BOrderStatus.TYPE_TOKEN:
                BOrderStatus bOrderStatus = BOrderStatus.bytesToOrderStatus(readBuf);
                updateOrderStatus(bOrderStatus);
                break;
            case BResponse.TYPE_TOKEN:
                BResponse response = BResponse.bytesToResponse(readBuf);
                successSendOrder(response);
                break;
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        mSubscriptions.clear();
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.menu_printer_test, menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.connect_scan: {
                connect();
                return true;
            }
            case R.id.disconnect_printer: {
                disconnect();
                return true;
            }
            case R.id.status: {
                LocalStatusActivity.start(getContext());
                return true;
            }
        }
        return false;
    }

    protected abstract RemoteDevice getDevice();

    protected abstract void connect();

    protected void disconnect() {
        if (hasDevice()) {
            RxBus.getDefault().post(new Events.DisconnectEvent(getDevice()));
        }
    }

    protected boolean hasDevice() {
        return getDevice() != null;
    }

}
package com.qg.smartprinter.localorder;

import com.qg.smartprinter.localorder.messages.BOrder;

import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

/**
 * 任务循环机
 */
public class ResendTaskManager {
    private static final int DELAY_INCREMENT_MIN = 2 * 1000; // 2s

    private Timer mTimer;
    private Map<Long, TaskRecycler> mTaskMap;

    public ResendTaskManager() {
        mTimer = new Timer();
        mTaskMap = new HashMap<>();
    }

    public static abstract class Task {
        private long id;
        private int delay;
        private int delayIncrement;

        protected Task(BOrder order) {
            int delay = (int) Math.ceil((float) order.getBytesLength() / 1000); // Unit : second.
            delay = delay <= 0 ? 1 : delay; // Guard negative number.
            delay += 5; // +5s
            delay *= 1000; // Second to millisecond.
            this.id = order.getOrderNumber();
            this.delay = delay;
            this.delayIncrement = DELAY_INCREMENT_MIN;
        }

        private int delayIncrement() {
            return delayIncrement += 2 * 1000;// +2s
        }

        /**
         * 下一次延时时间
         */
        int nextDelay() {
            return 30 * 1000; // 固定30s
//            // 每一次延时的时间都会增加
//            int temp = delay;
//            delay = temp + delayIncrement(); // Next delay time.
//            Log.d(TAG, timeMsg);
//            Log.d(TAG, delayMsg);
//            return temp;
        }

        public long getId() {
            return id;
        }

        protected abstract void run();
    }

    /**
     * 开始任务, 自动循环
     */
    public void startTask(Task task) {
        mTaskMap.put(task.id, scheduleTask(task));
        task.run();
    }

    private TaskRecycler scheduleTask(final Task task) {
        TaskRecycler t = new TaskRecycler(task);
        mTimer.schedule(t, task.nextDelay());
        return t;
    }

    public void clearTasks() {
        for (TaskRecycler taskRecycler : mTaskMap.values()) {
            taskRecycler.cancel();
        }

        mTaskMap.clear();
    }

    /**
     * 完成任务
     *
     * @param id 任务id
     */
    public boolean finishTask(long id) {
        TaskRecycler remove = mTaskMap.remove(id);
        if (remove != null) {
            remove.cancel();
            return true;
        }
        return false;
    }

    /**
     * 是否还有循环中的任务
     */
    public boolean hasTask() {
        return mTaskMap.size() > 0;
    }

    /**
     * 任务执行器, 若未完成则继续循环
     */
    private class TaskRecycler extends TimerTask {
        private Task task;

        private TaskRecycler(Task task) {
            this.task = task;
        }

        @Override
        public void run() {
            if (mTaskMap.containsKey(task.id)) {
                // 重启任务
                startTask(task);
            }
        }
    }
}
package com.qg.smartprinter.localorder.selectdevice;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.Intent;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.jakewharton.rxbinding.view.RxView;
import com.qg.smartprinter.Injection;
import com.qg.smartprinter.R;
import com.qg.smartprinter.localorder.DevicesManager;
import com.qg.smartprinter.localorder.bluetooth.BTDeviceListActivity;
import com.qg.smartprinter.localorder.device.BluetoothDeviceWrapper;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.ui.BaseActivity;
import com.qg.smartprinter.util.SharedPreferencesUtils;
import com.qg.smartprinter.util.rxbus.RxBus;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;

import rx.Subscription;
import rx.functions.Action1;
import rx.functions.Func1;
import rx.subscriptions.CompositeSubscription;

import static com.qg.smartprinter.localorder.device.RemoteDevice.STATE_CONNECTED;
import static com.qg.smartprinter.localorder.device.RemoteDevice.STATE_CONNECTING;
import static com.qg.smartprinter.localorder.device.RemoteDevice.STATE_NONE;

// 乱写的Activity，混杂了所有层次
public class SelectDeviceActivity extends BaseActivity
        implements SelectDeviceContract.Presenter,
        SelectDeviceContract.View {

    private static final int REQUEST_CONNECT_BT_DEVICE = 1;
    private static final int REQUEST_ENABLE_BT = 2;

    public static final String EXTRA_DEVICE_TYPE = "DEVICE_TYPE";

    private SelectDeviceContract.Presenter mPresenter;
    private SelectDeviceContract.View mView;
    private CompositeSubscription mSubscriptions;

    private WifiManager mWifiManager;
    private BluetoothAdapter mBluetoothAdapter;

    private View mBTDeviceView;
    private TextView mBTStatusView;
    private Button mConnectBTButton;
    private Button mDisconnectBTButton;

    private View mWifiDeviceView;
    private TextView mWifiStatusView;
    private Button mConnectWifiButton;
    private Button mDisconnectWifiButton;

    public static void start(Activity context, int requestCode) {
        Intent starter = new Intent(context, SelectDeviceActivity.class);
        context.startActivityForResult(starter, requestCode);
    }

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.select_device_activity);

        mPresenter = this;
        mView = this;

        setupViews();

        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        mWifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);

        BaseSchedulerProvider schedulerProvider = Injection.provideBaseSchedulerProvider();

        mSubscriptions = new CompositeSubscription();
        Subscription subscription = RxBus.getDefault().asObservable()
                .onBackpressureDrop() // Guard against uncontrollable frequency of upstream emissions.
                .observeOn(schedulerProvider.ui())
                .subscribe(new Action1<Object>() {
                    @Override
                    public void call(Object e) {
                        if (e instanceof Events.StateChangeEvent) {
                            updateWifiStatus();
                            updateBTStatus();
                        } else if (e instanceof Events.ConnectionFailedEvent) {
                            Toast.makeText(SelectDeviceActivity.this, SelectDeviceActivity.this.getString(R.string.connect_fail),
                                    Toast.LENGTH_SHORT).show();
                        } else if (e instanceof Events.ConnectionLostEvent) {
                            Toast.makeText(SelectDeviceActivity.this, SelectDeviceActivity.this.getString(R.string.connect_lost),
                                    Toast.LENGTH_SHORT).show();
                        } else if (e instanceof Events.ConnectedEvent) {
                            String name = ((Events.ConnectedEvent) e).getDevice().getName();
                            Toast.makeText(SelectDeviceActivity.this, getString(R.string.title_connected_to, name),
                                    Toast.LENGTH_SHORT).show();
                        }
                    }
                });
        mSubscriptions.add(subscription);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mPresenter = null;
        mView = null;
        mSubscriptions.clear();
    }

    private void setupViews() {
        mBTDeviceView = findViewById(R.id.bt_device);
        mBTStatusView = (TextView) findViewById(R.id.bt_status);
        mConnectBTButton = (Button) findViewById(R.id.connect_bt_btn);
        mDisconnectBTButton = (Button) findViewById(R.id.disconnect_bt_btn);

        mWifiDeviceView = findViewById(R.id.wifi_device);
        mWifiStatusView = (TextView) findViewById(R.id.wifi_status);
        mConnectWifiButton = (Button) findViewById(R.id.connect_wifi_btn);
        mDisconnectWifiButton = (Button) findViewById(R.id.disconnect_wifi_btn);

        // Set up click events.
        RxView.clicks(mBTDeviceView)
                .filter(new Func1<Void, Boolean>() {
                    @Override
                    public Boolean call(Void aVoid) {
                        return hasBTDevice();
                    }
                })
                .filter(new Func1<Void, Boolean>() {
                    @Override
                    public Boolean call(Void aVoid) {
                        return getBTDevice().getState() == STATE_CONNECTED;
                    }
                })
                .subscribe(new Action1<Void>() {
                    @Override
                    public void call(Void aVoid) {
                        Intent data = new Intent();
                        data.putExtra(EXTRA_DEVICE_TYPE, BluetoothDeviceWrapper.TYPE);
                        setResult(Activity.RESULT_OK, data);
                        finish();
                    }
                });
        RxView.clicks(mWifiDeviceView)
                .filter(new Func1<Void, Boolean>() {
                    @Override
                    public Boolean call(Void aVoid) {
                        return hasWifiDevice();
                    }
                })
                .filter(new Func1<Void, Boolean>() {
                    @Override
                    public Boolean call(Void aVoid) {
                        return getWifiDevice().getState() == STATE_CONNECTED;
                    }
                })
                .subscribe(new Action1<Void>() {
                    @Override
                    public void call(Void aVoid) {
                        Intent data = new Intent();
                        data.putExtra(EXTRA_DEVICE_TYPE, WifiDevice.TYPE);
                        setResult(Activity.RESULT_OK, data);
                        finish();
                    }
                });

        updateBTStatus();
        updateWifiStatus();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.connect_bt_btn:
                mPresenter.connectBT();
                break;
            case R.id.disconnect_bt_btn:
                mPresenter.disconnectBT();
                break;
            case R.id.connect_wifi_btn:
                mPresenter.connectWifi();
                break;
            case R.id.disconnect_wifi_btn:
                mPresenter.disconnectWifi();
                break;
            default:
                super.onClick(v);
        }
    }

    @Override
    public void connectWifi() {
        String ssid = mWifiManager.getConnectionInfo().getSSID();
        String ip = SharedPreferencesUtils.getInstance().getServerIP();
        int port = SharedPreferencesUtils.getInstance().getServerPort();
        WifiDevice device = new WifiDevice(ssid, ip, port);
        RxBus.getDefault().post(new Events.ConnectEvent(device));
        updateWifiStatus();
    }

    @Override
    public void disconnectWifi() {
        if (hasWifiDevice()) {
            RxBus.getDefault().post(new Events.DisconnectEvent(getWifiDevice()));
        }
    }

    @Override
    public void connectBT() {
        if (mBluetoothAdapter == null) {
            return;
        }
        if (!mBluetoothAdapter.isEnabled()) {
            mView.showEnableBT();
            return;
        }
        mView.showBTDevices();
    }

    @Override
    public void disconnectBT() {
        if (hasBTDevice()) {
            RxBus.getDefault().post(new Events.DisconnectEvent(getBTDevice()));
        }
    }

    @Override
    public void showBTDevices() {
        Intent serverIntent = new Intent(this, BTDeviceListActivity.class);
        startActivityForResult(serverIntent, REQUEST_CONNECT_BT_DEVICE);
    }

    @Override
    public void showEnableBT() {
        Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
    }

    @Override
    public void updateWifiStatus() {
        int status = STATE_NONE;
        String name = null;
        if (hasWifiDevice()) {
            status = getWifiDevice().getState();
            name = getWifiDevice().getName();
        }
        switch (status) {
            case STATE_NONE:
                mConnectWifiButton.setVisibility(View.VISIBLE);
                mDisconnectWifiButton.setVisibility(View.GONE);
                mWifiStatusView.setText(R.string.not_connected);
                break;
            case STATE_CONNECTING:
                mConnectWifiButton.setVisibility(View.GONE);
                mDisconnectWifiButton.setVisibility(View.VISIBLE);
                mWifiStatusView.setText(R.string.title_connecting);
                break;
            case STATE_CONNECTED:
                mConnectWifiButton.setVisibility(View.GONE);
                mDisconnectWifiButton.setVisibility(View.VISIBLE);
                mWifiStatusView.setText(getString(R.string.title_connected_to, name));
                break;
        }
    }

    @Override
    public void updateBTStatus() {
        int status = STATE_NONE;
        String name = null;
        if (hasBTDevice()) {
            status = getBTDevice().getState();
            name = getBTDevice().getName();
        }
        switch (status) {
            case STATE_NONE:
                mConnectBTButton.setVisibility(View.VISIBLE);
                mDisconnectBTButton.setVisibility(View.GONE);
                mBTStatusView.setText(R.string.not_connected);
                break;
            case STATE_CONNECTING:
                mConnectBTButton.setVisibility(View.GONE);
                mDisconnectBTButton.setVisibility(View.VISIBLE);
                mBTStatusView.setText(R.string.title_connecting);
                break;
            case STATE_CONNECTED:
                mConnectBTButton.setVisibility(View.GONE);
                mDisconnectBTButton.setVisibility(View.VISIBLE);
                mBTStatusView.setText(getString(R.string.title_connected_to, name));
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case REQUEST_ENABLE_BT:
                if (resultCode == Activity.RESULT_OK) {
                    mView.showBTDevices();
                }
                break;
            case REQUEST_CONNECT_BT_DEVICE:
                if (resultCode == Activity.RESULT_OK) {
                    connectBTDevice(data);
                    mView.updateBTStatus();
                }
                break;
        }
    }

    private void connectBTDevice(Intent data) {
        // Get the device MAC address
        String address = data.getExtras()
                .getString(BTDeviceListActivity.EXTRA_DEVICE_ADDRESS);
        // Get the BluetoothDevice object
        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
        // Attempt to createSocket to the device
        RxBus.getDefault().post(new Events.ConnectEvent(new BluetoothDeviceWrapper(device)));
    }

    public boolean hasBTDevice() {
        return getBTDevice() != null;
    }

    public boolean hasWifiDevice() {
        return getWifiDevice() != null;
    }

    public RemoteDevice getBTDevice() {
        return DevicesManager.getInstance().getBTDevice();
    }

    public RemoteDevice getWifiDevice() {
        return DevicesManager.getInstance().getTCPDevice();
    }
}
package com.qg.smartprinter.localorder.selectdevice;

/**
 * @author TZH
 * @version 1.0
 */
public class SelectDeviceContract {

    // 乱写的View
    interface View {
        void showBTDevices();
        void showEnableBT();
        void updateWifiStatus();
        void updateBTStatus();
    }

    // 乱写的Presenter
    interface Presenter {
        void connectWifi();

        void disconnectWifi();

        void connectBT();

        void disconnectBT();
    }
}
package com.qg.smartprinter.localorder.status.localstatus;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.TabLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.Toolbar;

import com.qg.smartprinter.R;
import com.qg.smartprinter.ui.BaseActivity;

import static com.qg.common.Preconditions.checkNotNull;

public class LocalStatusActivity extends BaseActivity {

    public static void start(Context context) {
        Intent starter = new Intent(context, LocalStatusActivity.class);
        context.startActivity(starter);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_local_status);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        ActionBar ab = checkNotNull(getSupportActionBar());
        ab.setDefaultDisplayHomeAsUpEnabled(true);
        // Create the adapter that will return a fragment for each of the two
        // primary sections of the activity.
        StatusPagerAdapter statusPagerAdapter = new StatusPagerAdapter(getSupportFragmentManager());

        // Set up the ViewPager with the sections adapter.
        ViewPager viewPager = (ViewPager) findViewById(R.id.container);
        viewPager.setAdapter(statusPagerAdapter);

        TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
        tabLayout.setupWithViewPager(viewPager);
    }


    private class StatusPagerAdapter extends FragmentPagerAdapter {

        private StatusPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            switch (position) {
                case 0:
                    return OrderStatusFragment.newInstanceWithPresenter(LocalStatusActivity.this);
                case 1:
                    return PrinterStatusFragment.newInstanceWithPresenter();
            }
            return null;
        }

        @Override
        public int getCount() {
            return 2;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 0:
                    return getString(R.string.order_status);
                case 1:
                    return getString(R.string.printer_status);
            }
            return null;
        }
    }
}
package com.qg.smartprinter.localorder.status.localstatus;

import android.support.annotation.NonNull;

import com.qg.smartprinter.BasePresenter;
import com.qg.smartprinter.BaseView;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.Printer;

import java.util.List;

/**
 * This specifies the contract between the view and the presenter.
 */
public interface LocalStatusContract {

    interface OrderStatusView extends BaseView<OrderStatusPresenter> {

        void setLoadingIndicator(boolean active);

        void showOrderDetailsUi(String orderId);

        void showOrders(List<Order> orders);

        void showNoOrders();

        void showLoadingOrdersError();

        boolean isActive();

        void showError(String s);
    }

    interface OrderStatusPresenter extends BasePresenter {

        void loadOrders(boolean forceUpdate);

        void openOrderDetails(@NonNull Order order);

        boolean resend(Order item);
    }

    interface PrinterStatusView extends BaseView<PrinterStatusPresenter> {

        void setLoadingIndicator(boolean active);

        void showPrinters(List<Printer> printers);

        void showNoPrinters();

        void showLoadingPrintersError();

        boolean isActive();
    }

    interface PrinterStatusPresenter extends BasePresenter {

        void loadPrinters(boolean forceUpdate);
    }
}
package com.qg.smartprinter.localorder.status.localstatus;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.qg.common.logger.Log;
import com.qg.common.widget.CommonViewHolder;
import com.qg.common.widget.RecyclerArrayAdapter;
import com.qg.smartprinter.Injection;
import com.qg.smartprinter.R;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.localorder.status.message.MessageActivity;
import com.qg.smartprinter.ui.BaseFragment;

import java.util.List;

import static com.qg.common.Preconditions.checkNotNull;

/**
 * Display a list of {@link Order}s.
 */
public class OrderStatusFragment extends BaseFragment
        implements LocalStatusContract.OrderStatusView {

    public RecyclerView mOrderListView;

    public Adapter mOrderArrayAdapter;

    private LocalStatusContract.OrderStatusPresenter mPresenter;

    public static OrderStatusFragment newInstanceWithPresenter(Context context) {
        OrderStatusFragment fragment = new OrderStatusFragment();
        new OrderStatusPresenter(
                Injection.provideOrdersRepository(context),
                fragment,
                Injection.provideBaseSchedulerProvider()
        );
        return fragment;
    }

    public static OrderStatusFragment newInstance() {
        return new OrderStatusFragment();
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_local_order_status, container, false);
        mOrderListView = (RecyclerView) v.findViewById(R.id.lv_finished_order);

        mOrderArrayAdapter = new Adapter(getContext());
        mOrderArrayAdapter.setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(int position) {
                final Order item = checkNotNull(mOrderArrayAdapter.getItem(position));
                mPresenter.openOrderDetails(item);
            }
        });

        mOrderListView.setAdapter(mOrderArrayAdapter);
        setRetainInstance(true);

        return v;
    }

    @Override
    public void onResume() {
        super.onResume();
        mPresenter.subscribe();
    }

    @Override
    public void onPause() {
        super.onPause();
        mPresenter.unsubscribe();
    }

    @Override
    public void setLoadingIndicator(boolean active) {
    }

    @Override
    public void showOrderDetailsUi(String orderId) {
        MessageActivity.start(getContext(), orderId);
    }

    @Override
    public void showOrders(List<Order> orders) {
        mOrderArrayAdapter.setList(orders);
    }

    @Override
    public void showNoOrders() {
        mOrderArrayAdapter.clear();
    }

    @Override
    public void showLoadingOrdersError() {
        Toast.makeText(getContext(), "加载出错", Toast.LENGTH_SHORT).show();
    }

    @Override
    public boolean isActive() {
        return isAdded();
    }

    @Override
    public void showError(String s) {
        Toast.makeText(getContext(), s, Toast.LENGTH_SHORT).show();
    }

    @Override
    public void setPresenter(@NonNull LocalStatusContract.OrderStatusPresenter presenter) {
        mPresenter = checkNotNull(presenter);
    }

    private class Adapter extends RecyclerArrayAdapter<Order> {

        public Adapter(Context context) {
            super(context, R.layout.item_layout_local_order);
        }

        private static final String TAG = "Adapter";
        @Override
        protected void onBind(CommonViewHolder holder, final Order item) {
            holder.getTextView(R.id.text).setText(item.toString());
            final View resendButton = holder.get(R.id.corrected);
            String status = item.getStatus();
            resendButton.setVisibility(Order.UNFINISHED.equals(status) ? View.VISIBLE : View.GONE);
            resendButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (mPresenter.resend(item)) {
                        resendButton.setVisibility(View.GONE);
                    }
                }
            });
        }
    }

}
package com.qg.smartprinter.localorder.status.localstatus;

import android.support.annotation.NonNull;

import com.qg.common.logger.Log;
import com.qg.smartprinter.data.source.Order;
import com.qg.smartprinter.data.source.OrdersDataSource;
import com.qg.smartprinter.localorder.DevicesManager;
import com.qg.smartprinter.localorder.OrderManager;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.localorder.messages.BOrder;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;

import java.util.List;

import rx.Observer;
import rx.Subscription;
import rx.subscriptions.CompositeSubscription;

import static com.qg.common.Preconditions.checkNotNull;
import static com.qg.smartprinter.data.source.Order.TYPE_BT;
import static com.qg.smartprinter.data.source.Order.TYPE_WIFI;

/**
 * Listens to user actions from the UI ({@link OrderStatusFragment}), retrieves the data and
 * updates the UI as required.
 */
public class OrderStatusPresenter implements LocalStatusContract.OrderStatusPresenter {

    private OrdersDataSource mOrdersRepository;

    private LocalStatusContract.OrderStatusView mOrderStatusView;

    private BaseSchedulerProvider mSchedulerProvider;

    private CompositeSubscription mSubscriptions;

    public OrderStatusPresenter(@NonNull OrdersDataSource ordersRepository,
                                @NonNull LocalStatusContract.OrderStatusView orderStatusView,
                                @NonNull BaseSchedulerProvider schedulerProvider) {
        mOrdersRepository = checkNotNull(ordersRepository);
        mOrderStatusView = checkNotNull(orderStatusView);
        mSchedulerProvider = checkNotNull(schedulerProvider);

        mSubscriptions = new CompositeSubscription();
        mOrderStatusView.setPresenter(this);
    }

    @Override
    public void loadOrders(boolean forceUpdate) {
        mOrderStatusView.setLoadingIndicator(true);

        mSubscriptions.clear();
        Subscription subscription = mOrdersRepository
                .getOrders()
                .subscribeOn(mSchedulerProvider.computation())
                .observeOn(mSchedulerProvider.ui())
                .subscribe(new Observer<List<Order>>() {
                    @Override
                    public void onCompleted() {
                        mOrderStatusView.setLoadingIndicator(false);
                    }

                    @Override
                    public void onError(Throwable e) {
                        mOrderStatusView.showLoadingOrdersError();
                    }

                    @Override
                    public void onNext(List<Order> orders) {
                        Log.d(TAG, "onNext: SIZE:" + orders.size());
                        processOrders(orders);
                    }
                });
        mSubscriptions.add(subscription);
    }

    private static final String TAG = "OrderStatusPresenter";

    private void processOrders(@NonNull List<Order> orders) {
        if (orders.isEmpty()) {
            mOrderStatusView.showNoOrders();
        } else {
            mOrderStatusView.showOrders(orders);
        }
    }

    @Override
    public void openOrderDetails(@NonNull Order order) {
        mOrderStatusView.showOrderDetailsUi(order.getId());
    }

    @Override
    public boolean resend(Order item) {
        // 直接重传原类型设备
        if (Order.getTargetDeviceType(item.getType()) == TYPE_BT) {
            RemoteDevice btDevice = DevicesManager.getInstance().getBTDevice();
            if (btDevice != null) {
                OrderManager.getBus().post(new Events.OrderEvent(btDevice, BOrder.fromOrder(item, 0), true));
                return true;
            } else {
                mOrderStatusView.showError("还没有连接到蓝牙设备");
            }
        } else if (Order.getTargetDeviceType(item.getType()) == TYPE_WIFI) {
            RemoteDevice tcpDevice = DevicesManager.getInstance().getTCPDevice();
            if (tcpDevice != null) {
                OrderManager.getBus().post(new Events.OrderEvent(tcpDevice, BOrder.fromOrder(item, 0), true));
                return true;
            } else {
                mOrderStatusView.showError("还没有连接到Wifi设备");
            }
        }
        return false;
    }

    @Override
    public void subscribe() {
        loadOrders(false);
    }

    @Override
    public void unsubscribe() {
        mSubscriptions.clear();
    }

}
package com.qg.smartprinter.localorder.status.localstatus;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.qg.smartprinter.Injection;
import com.qg.smartprinter.R;
import com.qg.smartprinter.localorder.Printer;

import java.util.List;

import static com.qg.common.Preconditions.checkNotNull;

/**
 * Display a list of {@link Printer}s.
 */
public class PrinterStatusFragment extends Fragment
        implements LocalStatusContract.PrinterStatusView {

    private LocalStatusContract.PrinterStatusPresenter mPresenter;

    private TextView mStatusView;

    public static PrinterStatusFragment newInstanceWithPresenter() {
        PrinterStatusFragment fragment = new PrinterStatusFragment();

        new PrinterStatusPresenter(
                Injection.providePrintersRepository(),
                fragment,
                Injection.provideBaseSchedulerProvider()
        );
        return fragment;
    }

    public static PrinterStatusFragment newInstance() {
        PrinterStatusFragment fragment = new PrinterStatusFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_local_printer_status, container, false);
        mStatusView = (TextView) v.findViewById(R.id.printer_status);
        setRetainInstance(true);
        return v;
    }

    @Override
    public void onResume() {
        super.onResume();
        mPresenter.subscribe();
    }

    @Override
    public void onPause() {
        super.onPause();
        mPresenter.unsubscribe();
    }

    @Override
    public void setLoadingIndicator(boolean active) {
    }

    @Override
    public void showPrinters(List<Printer> printers) {
        mStatusView.setText(null);
        for (Printer printer : printers) {
            mStatusView.append(
                    getString(R.string.printer_status_format,
                            printer.getName(), printer.getAddress(), printer.getStatusString(), printer.getConnectMethod())
            );
        }
    }

    @Override
    public void showNoPrinters() {
        mStatusView.setText(getString(R.string.not_any_printer));
    }

    @Override
    public void showLoadingPrintersError() {
    }

    @Override
    public boolean isActive() {
        return isAdded();
    }

    @Override
    public void setPresenter(LocalStatusContract.PrinterStatusPresenter presenter) {
        mPresenter = checkNotNull(presenter);
    }
}
package com.qg.smartprinter.localorder.status.localstatus;

import android.support.annotation.NonNull;

import com.qg.common.logger.Log;
import com.qg.smartprinter.data.source.PrintersDataSource;
import com.qg.smartprinter.localorder.Printer;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;

import java.util.List;

import rx.Observer;
import rx.Subscription;
import rx.subscriptions.CompositeSubscription;

import static com.qg.common.Preconditions.checkNotNull;

/**
 * Listens to user actions from the UI ({@link PrinterStatusFragment}), retrieves the data and
 * updates the UI as required.
 */
public class PrinterStatusPresenter implements LocalStatusContract.PrinterStatusPresenter {

    private PrintersDataSource mPrintersRepository;

    private LocalStatusContract.PrinterStatusView mPrinterStatusView;

    private BaseSchedulerProvider mSchedulerProvider;

    private CompositeSubscription mSubscriptions;

    public PrinterStatusPresenter(@NonNull PrintersDataSource printersRepository,
                                  @NonNull LocalStatusContract.PrinterStatusView printerStatusView,
                                  @NonNull BaseSchedulerProvider schedulerProvider) {
        mPrintersRepository = checkNotNull(printersRepository);
        mPrinterStatusView = checkNotNull(printerStatusView);
        mSchedulerProvider = checkNotNull(schedulerProvider);

        mSubscriptions = new CompositeSubscription();
        mPrinterStatusView.setPresenter(this);
    }

    @Override
    public void loadPrinters(boolean forceUpdate) {
        mPrinterStatusView.setLoadingIndicator(true);
        mSubscriptions.clear();
        Subscription subscription = mPrintersRepository
                .getPrinters()
                .subscribeOn(mSchedulerProvider.computation())
                .observeOn(mSchedulerProvider.ui())
                .subscribe(new Observer<List<Printer>>() {
                    @Override
                    public void onCompleted() {
                        mPrinterStatusView.setLoadingIndicator(false);
                    }

                    @Override
                    public void onError(Throwable e) {
                        mPrinterStatusView.showLoadingPrintersError();
                    }

                    @Override
                    public void onNext(List<Printer> printers) {
                        processPrinters(printers);
                    }
                });
        mSubscriptions.add(subscription);
    }

    private void processPrinters(@NonNull List<Printer> printers) {
        if (!printers.isEmpty()) {
            mPrinterStatusView.showPrinters(printers);
            Log.d(TAG, "processPrinters: HasPrinter");
        } else {
            mPrinterStatusView.showNoPrinters();
            Log.d(TAG, "processPrinters: NoPrinter");
        }
    }

    @Override
    public void subscribe() {
        loadPrinters(false);
    }

    @Override
    public void unsubscribe() {
        mSubscriptions.clear();
    }

    private static final String TAG = "PrinterStatusPresenter";
}
package com.qg.smartprinter.localorder.status.message;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import com.qg.smartprinter.Injection;
import com.qg.smartprinter.R;
import com.qg.smartprinter.ui.BaseActivity;
import com.qg.smartprinter.util.ActivityUtils;

public class MessageActivity extends BaseActivity {

    private static final String ARG_ORDER_ID = "ORDER_ID";

    public static void start(Context context, String orderId) {
        Intent starter = new Intent(context, MessageActivity.class);
        starter.putExtra(ARG_ORDER_ID, orderId);
        context.startActivity(starter);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_message);


        MessageFragment fragment =
                (MessageFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);

        String orderId = getIntent().getStringExtra(ARG_ORDER_ID);
        if (fragment == null) {
            fragment = MessageFragment.newInstance(orderId);

            ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),
                    fragment, R.id.contentFrame);
        }

        new MessagePresenter(
                orderId,
                Injection.provideOrdersRepository(this),
                fragment,
                Injection.provideBaseSchedulerProvider()
        );
    }

}
package com.qg.smartprinter.localorder.status.message;

import com.qg.smartprinter.BasePresenter;
import com.qg.smartprinter.BaseView;
import com.qg.smartprinter.data.source.Message;

import java.util.List;

/**
 * @author TZH
 * @version 1.0
 */
public interface MessageContract {
    interface View extends BaseView<Presenter> {

        void showLoadingIndicator(boolean active);

        void showMessages(List<Message> messages);

        void showNoMessages();

        void showLoadingError();

        boolean isActive();
    }

    interface Presenter extends BasePresenter {

        void loadMessages(boolean forceUpdate);
    }
}
package com.qg.smartprinter.localorder.status.message;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.qg.smartprinter.R;
import com.qg.smartprinter.data.source.Message;
import com.qg.smartprinter.ui.BaseFragment;

import java.util.ArrayList;
import java.util.List;

import static com.qg.common.Preconditions.checkNotNull;

/**
 * Display a list of {@link Message}s.
 */
public class MessageFragment extends BaseFragment implements MessageContract.View {

    private static final String ARGUMENT_ORDER_ID = "ORDER_ID";

    public MessageAdapter mAdapter;

    private MessageContract.Presenter mPresenter;

    public static MessageFragment newInstance(String orderId) {
        MessageFragment fragment = new MessageFragment();
        Bundle args = new Bundle();
        args.putString(ARGUMENT_ORDER_ID, orderId);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mAdapter = new MessageAdapter(new ArrayList<Message>(0), mItemListener);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_message_list, container, false);

        // Set the adapter
        if (view instanceof RecyclerView) {
            Context context = view.getContext();
            RecyclerView recyclerView = (RecyclerView) view;
            recyclerView.setLayoutManager(new LinearLayoutManager(context));
            recyclerView.setAdapter(mAdapter);
        }
        setRetainInstance(true);
        return view;
    }

    @Override
    public void onResume() {
        super.onResume();
        mPresenter.subscribe();
    }

    @Override
    public void onPause() {
        super.onPause();
        mPresenter.unsubscribe();
    }

    MessageItemListener mItemListener = new MessageItemListener() {
        @Override
        public void onMessageClick(Message clickedMessage) {
            // Do nothing.
        }
    };

    @Override
    public void showLoadingIndicator(boolean active) {
    }

    @Override
    public void showMessages(List<Message> messages) {
        mAdapter.replaceData(messages);
    }

    @Override
    public void showNoMessages() {
        mAdapter.replaceData(new ArrayList<Message>(0));
    }

    @Override
    public void showLoadingError() {
        Toast.makeText(getContext(), "加载失败", Toast.LENGTH_SHORT).show();
    }

    @Override
    public boolean isActive() {
        return isAdded();
    }

    @Override
    public void setPresenter(MessageContract.Presenter presenter) {
        mPresenter = checkNotNull(presenter);
    }

    public static class MessageAdapter extends RecyclerView.Adapter<MessageAdapter.ViewHolder> {

        private List<Message> mValues;

        private MessageItemListener mItemListener;

        MessageAdapter(List<Message> items, MessageItemListener listener) {
            mValues = items;
            mItemListener = listener;
        }

        void replaceData(@NonNull List<Message> messages) {
            setList(messages);
            notifyDataSetChanged();
        }

        public void setList(@NonNull List<Message> messages) {
            mValues = checkNotNull(messages);
        }

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.fragment_message, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, int position) {
            holder.mItem = mValues.get(position);
            holder.mIdView.setText(String.valueOf(position));
            holder.mContentView.setText(mValues.get(position).toString());

            holder.mView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (null != mItemListener) {
                        mItemListener.onMessageClick(holder.mItem);
                    }
                }
            });
        }

        @Override
        public int getItemCount() {
            return mValues.size();
        }

        class ViewHolder extends RecyclerView.ViewHolder {
            private final View mView;

            private final TextView mIdView;

            private final TextView mContentView;

            private Message mItem;

            ViewHolder(View view) {
                super(view);
                mView = view;
                mIdView = (TextView) view.findViewById(R.id.id);
                mContentView = (TextView) view.findViewById(R.id.content);
            }

            @Override
            public String toString() {
                return super.toString() + " '" + mContentView.getText() + "'";
            }
        }
    }

    public interface MessageItemListener {
        void onMessageClick(Message clickedMessage);
    }
}
package com.qg.smartprinter.localorder.status.message;

import android.support.annotation.NonNull;

import com.qg.smartprinter.data.source.Message;
import com.qg.smartprinter.data.source.OrdersDataSource;
import com.qg.smartprinter.util.scheduler.BaseSchedulerProvider;

import java.util.List;

import rx.Observer;
import rx.Subscription;
import rx.subscriptions.CompositeSubscription;

import static com.qg.common.Preconditions.checkNotNull;

/**
 * Listens to user actions from the UI ({@link MessageFragment}), retrieves the data and updates
 * the UI as required.
 */
public class MessagePresenter implements MessageContract.Presenter {

    private String mOrderId;

    private OrdersDataSource mOrdersRepository;

    private MessageContract.View mMessageView;

    private BaseSchedulerProvider mSchedulerProvider;

    private CompositeSubscription mSubscriptions;

    public MessagePresenter(@NonNull String orderId,
                            @NonNull OrdersDataSource ordersRepository,
                            @NonNull MessageContract.View view,
                            @NonNull BaseSchedulerProvider schedulerProvider) {
        mOrderId = checkNotNull(orderId);
        mOrdersRepository = checkNotNull(ordersRepository);
        mMessageView = checkNotNull(view);
        mSchedulerProvider = checkNotNull(schedulerProvider);
        mMessageView.setPresenter(this);

        mSubscriptions = new CompositeSubscription();
    }

    @Override
    public void loadMessages(boolean forceUpdate) {
        mSubscriptions.clear();
        Subscription subscription = mOrdersRepository
                .getMessagesWithOrderId(mOrderId)
                .subscribeOn(mSchedulerProvider.computation())
                .observeOn(mSchedulerProvider.ui())
                .subscribe(new Observer<List<Message>>() {
                    @Override
                    public void onCompleted() {
                        mMessageView.showLoadingIndicator(false);
                    }

                    @Override
                    public void onError(Throwable e) {
                        mMessageView.showLoadingError();
                    }

                    @Override
                    public void onNext(List<Message> messages) {
                        processMessages(messages);
                    }
                });
        mSubscriptions.add(subscription);
    }

    private void processMessages(List<Message> messages) {
        if (messages.isEmpty()) {
            mMessageView.showNoMessages();
        } else {
            mMessageView.showMessages(messages);
        }
    }


    @Override
    public void subscribe() {
        loadMessages(false);
    }

    @Override
    public void unsubscribe() {
        mSubscriptions.clear();
    }
}
package com.qg.smartprinter.localorder.util;

import android.support.annotation.VisibleForTesting;

import java.nio.ByteBuffer;
import java.util.Arrays;

/**
 * 由于传输的数据都应该是无符号数，所以使用更大的类型作为存储类型
 */
public class BytesConvert {

    public static int intFrom2Bytes(byte[] bytes) {
        if (bytes.length < 2) {
            return -1;
        }
        return ByteBuffer.allocate(4).putShort((short) 0).put(bytes, 0, 2).getInt(0);
    }

    public static long longFrom4Bytes(byte[] bytes) {
        if (bytes.length < 4) {
            return -1;
        }
        return ByteBuffer.allocate(8).putInt(0).put(bytes, 0, 4).getLong(0);
    }

    @VisibleForTesting
    public
    static byte[] intTo4Bytes(int number) {
        return ByteBuffer.allocate(4).putInt(number).array();
    }

    @VisibleForTesting
    public
    static byte[] shortTo2Bytes(short number) {
        return ByteBuffer.allocate(2).putShort(number).array();
    }

    public static int fill2BytesInt(int number, byte[] bytes, int start) {
        byte[] b = shortTo2Bytes((short) number);

        System.arraycopy(b, 0, bytes, start, b.length);

        return start + b.length;
    }

    public static int fill4BytesLong(long number, byte[] bytes, int start) {
        byte[] b = intTo4Bytes((int) number);

        System.arraycopy(b, 0, bytes, start, b.length);

        return start + b.length;
    }

    public static int fillByte(byte[] srcByte, byte[] bytes, int start) {
        System.arraycopy(srcByte, 0, bytes, start, srcByte.length);

        return start + srcByte.length;
    }

    /**
     * 将byte数组按4字节对齐
     */
    public static byte[] getFilledBytes(byte[] bytes) {
        //获取内容的长度
        int length = bytes.length;
        //因为要字节对齐,以4字节为为单位,所以计算要填充多少位字节
        int fillLength = 4 - (length % 4);
        fillLength %= 4;
        //创建字节数组,大小为数据长度
        byte[] data = new byte[length + fillLength];
        Arrays.fill(data, (byte) 0);
        //填充数据
        BytesConvert.fillByte(bytes, data, 0);
        return data;
    }

}
package com.qg.smartprinter.localorder.util;

import java.nio.charset.Charset;
import java.util.Arrays;

/**
 * 字符集
 */
public class Charsets {
    public static final Charset PRINTER_CHARSET = Charset.forName("gb2312");
    public static final Charset URL_QR_CODE_CHARSET = Charset.forName("ascii");
}
package com.qg.smartprinter.localorder.util;

import java.io.IOException;

/**
 * 校验和异常
 */
public class CheckSumException extends IOException {
    private byte[] mBytes;

    public CheckSumException(byte[] bytes) {
        this(null, bytes);
    }

    public CheckSumException(String detailMessage, byte[] bytes) {
        this(detailMessage, null, bytes);
    }

    public CheckSumException(String message, Throwable cause, byte[] bytes) {
        super(message, cause);
        this.mBytes = bytes;
    }

    public CheckSumException(Throwable cause) {
        super(cause);
    }

    public byte[] getBytes() {
        return mBytes;
    }

    public void setBytes(byte[] bytes) {
        mBytes = bytes;
    }
}
package com.qg.smartprinter.localorder.util;

import java.util.Arrays;

/**
 * 校验和工具类
 */
public class CheckSumUtil {

//    public static int checkSum(byte[] msg) {
//        return csum(msg, msg.length);
//    }
//
//    private static int csum(byte[] addr, int count) {
//        int sum = 0;
//        for (int i = 0; i < count; i += 2) {
//            short s1 = (short) (addr[i] & 0xff + (addr[i + 1] << 8));
//            int s = BytesConvert.intFrom2Bytes(
//                    Arrays.copyOfRange(addr, i, i + 2)
//            );
//            System.out.print(s);
//            System.out.print("---");
//            System.out.println(s & 0xffff);
////            int i1 = s & 0xffff;
////            sum += i1;
//            sum += s;
//        }
//    /*
//    if(len){//理论上都是对齐4字节，所以没有len == 0的情况
//		sum += *(u8_t*)data;
//	}
//	*/
//        sum = (sum >> 16) + (sum & 0xffff);
//        sum += (sum >> 16);
//        System.out.println("aaa`" + (short) ~sum + "`bbb" + (0xff & (short) ~sum));
//        return 0xFF & (short) (~sum);
//    }

    public static short checkSum(byte[] msg) {
        return csum(msg, msg.length);
    }

    private static short csum(byte[] addr, int count) {
        int sum = 0;
        for (int i = 0; i < count; i += 2) {
//            short s = (short) (addr[i] & 0xff + (addr[i + 1] << 8));
            short s = (short) BytesConvert.intFrom2Bytes(
                    Arrays.copyOfRange(addr, i, i + 2)
            );
            int i1 = s & 0xffff;
            sum += i1;
        }
    /*
    if(len){//理论上都是对齐4字节，所以没有len == 0的情况
		sum += *(u8_t*)data;
	}
	*/
        sum = (sum >> 16) + (sum & 0xffff);
        sum += (sum >> 16);
        return (short) (~sum);
    }

}
package com.qg.smartprinter.localorder.util;

/**
 * 测试专用工具
 */
public final class DebugUtil {

    public static String getBytesString(byte[] bytes) {
        final StringBuilder sb = new StringBuilder();
        sb.append("{\n");
        for (int i = 0; i < bytes.length; i += 4) {
            byte[] test = new byte[4];
            System.arraycopy(bytes, i, test, 0, 4);
            StringBuilder builder = new StringBuilder();
            for (int j = 0; j < 4; j++) {
                builder.append(String.format("0x%02X, ", test[j] & 0xFF));
            }
            sb.append(String.format("%s\n", builder.toString()));
        }
        sb.append("}");
        return sb.toString();
    }

    public static String getByteString(byte b) {
        return String.format("0x%02X", b & 0xFF);
    }
}
package com.qg.smartprinter.localorder.util;

import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Parcelable;
import android.support.v4.content.LocalBroadcastManager;

import com.qg.smartprinter.localorder.Constants;

import java.io.Serializable;

/**
 * 简易辅助类
 */
public class LocalBroadcastUtil {
    public static IntentFilter newIntentFilter(String... actions) {
        IntentFilter intentFilter = new IntentFilter();
        for (String action : actions) {
            intentFilter.addAction(action);
        }
        return intentFilter;
    }

    public static void sendBroadcast(Context context, String action) {
        LocalBroadcastManager.getInstance(context)
                .sendBroadcast(new Intent(action));
    }

    public static void sendBroadcast(Context context, String action, int obj) {
        Intent intent = new Intent(action);
        intent.putExtra(Constants.OBJECT, obj);
        LocalBroadcastManager.getInstance(context)
                .sendBroadcast(intent);
    }

    public static <T extends Serializable> void sendBroadcast(Context context, String action, T obj) {
        Intent intent = new Intent(action);
        intent.putExtra(Constants.OBJECT, obj);
        LocalBroadcastManager.getInstance(context)
                .sendBroadcast(intent);
    }

    public static <T extends Parcelable> void sendBroadcast(Context context, String action, T obj) {
        Intent intent = new Intent(action);
        intent.putExtra(Constants.OBJECT, obj);
        LocalBroadcastManager.getInstance(context)
                .sendBroadcast(intent);
    }
}
package com.qg.smartprinter.localorder.wifi;
/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.support.annotation.IntDef;
import android.support.annotation.IntegerRes;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;


/**
 * This is partial segment of a class {AccessPoint} in the in the Android Open Source Project.
 */
public class AccessPoint {
    private static final String TAG = "AccessPoint";

    @IntDef({SECURITY_NONE, SECURITY_WEP, SECURITY_PSK, SECURITY_EAP})
    @Retention(RetentionPolicy.SOURCE)
    public @interface Security {
    }

    /**
     * These values are matched in string arrays -- changes must be kept in sync
     */
    public static final int SECURITY_NONE = 0;
    public static final int SECURITY_WEP = 1;
    public static final int SECURITY_PSK = 2;
    public static final int SECURITY_EAP = 3;

    @IntDef({PSK_UNKNOWN, PSK_WPA, PSK_WPA2, PSK_WPA_WPA2})
    @Retention(RetentionPolicy.SOURCE)
    public @interface PskType {
    }

    private static final int PSK_UNKNOWN = 0;
    private static final int PSK_WPA = 1;
    private static final int PSK_WPA2 = 2;
    private static final int PSK_WPA_WPA2 = 3;

    public static String convertToQuotedString(String string) {
        return "\"" + string + "\"";
    }

    @PskType
    public static int getPskType(ScanResult result) {
        boolean wpa = result.capabilities.contains("WPA-PSK");
        boolean wpa2 = result.capabilities.contains("WPA2-PSK");
        if (wpa2 && wpa) {
            return PSK_WPA_WPA2;
        } else if (wpa2) {
            return PSK_WPA2;
        } else if (wpa) {
            return PSK_WPA;
        } else {
            Log.w(TAG, "Received abnormal flag string: " + result.capabilities);
            return PSK_UNKNOWN;
        }
    }

    @Security
    public static int getSecurity(ScanResult result) {
        if (result.capabilities.contains("WEP")) {
            return SECURITY_WEP;
        } else if (result.capabilities.contains("PSK")) {
            return SECURITY_PSK;
        } else if (result.capabilities.contains("EAP")) {
            return SECURITY_EAP;
        }
        return SECURITY_NONE;
    }

    public static int getSecurity(WifiConfiguration config) {
        if (config.allowedKeyManagement.get(KeyMgmt.WPA_PSK)) {
            return SECURITY_PSK;
        }
        if (config.allowedKeyManagement.get(KeyMgmt.WPA_EAP) ||
                config.allowedKeyManagement.get(KeyMgmt.IEEE8021X)) {
            return SECURITY_EAP;
        }
        return (config.wepKeys[0] != null) ? SECURITY_WEP : SECURITY_NONE;
    }

    public static String securityToString(@Security int security, @PskType int pskType) {
        if (security == SECURITY_WEP) {
            return "WEP";
        } else if (security == SECURITY_PSK) {
            if (pskType == PSK_WPA) {
                return "WPA";
            } else if (pskType == PSK_WPA2) {
                return "WPA2";
            } else if (pskType == PSK_WPA_WPA2) {
                return "WPA_WPA2";
            }
            return "PSK";
        } else if (security == SECURITY_EAP) {
            return "EAP";
        }
        return "NONE";
    }

    public static String removeDoubleQuotes(String string) {
        if (TextUtils.isEmpty(string)) {
            return "";
        }
        int length = string.length();
        if ((length > 1) && (string.charAt(0) == '"')
                && (string.charAt(length - 1) == '"')) {
            return string.substring(1, length - 1);
        }
        return string;
    }

}

package com.qg.smartprinter.localorder.wifi;

/**
 * @author TZH
 * @version 1.0
 */
public class Config {
    public static final String SERVER_IP = "10.10.100.254";
    public static final int SERVER_PORT = 8899;
}
package com.qg.smartprinter.localorder.wifi;

import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;

import static com.qg.smartprinter.localorder.wifi.AccessPoint.getSecurity;

/**
 * Wifi访问点.
 * Created by TZH on 2016/10/14.
 */

public class WifiAccessPoint {

    /**
     * Wifi是否需要密码
     */
    private boolean mNeedPassword;
    /**
     * 是否支持此类型的Wifi
     */
    private boolean mSupported;

   /**
     * Wi-fi的地址
     */
    private String BSSID;

    /**
     * Wi-fi的名称
     */
    private String SSID;

    /**
     * 安全类型
     */
    private @AccessPoint.Security
    int mSecurity;

    /**
     * 密码
     */
    private String mPassword;

    public void setSecurity(@AccessPoint.Security int security) {
        mSecurity = security;
    }

    /**
     * 对应的Configuration
     */
    private WifiConfiguration mConfiguration;

    private WifiAccessPoint() {
    }

    public static WifiAccessPoint from(ScanResult result) {
        WifiAccessPoint point = new WifiAccessPoint();
        point.BSSID = result.BSSID;
        point.SSID = result.SSID;
        point.mSecurity = getSecurity(result);
        point.mNeedPassword = WifiUtil.needPassword(point.mSecurity);
        point.mSupported = WifiUtil.isSupport(point.mSecurity);
        return point;
    }
}
package com.qg.smartprinter.localorder.wifi;

import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;

import com.qg.smartprinter.R;

public class WifiConnectActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wifi_connect);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });
    }

}
package com.qg.smartprinter.localorder.wifi;

import com.qg.smartprinter.ui.BaseActivity;

/**
 * Created by TZH on 2016/9/5.
 */
public class WifiDeviceListActivity extends BaseActivity {

}
package com.qg.smartprinter.localorder.wifi;

import android.content.Context;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.widget.Toast;

import com.qg.smartprinter.localorder.DevicesManager;
import com.qg.smartprinter.localorder.PrinterTestFragment;
import com.qg.smartprinter.localorder.device.RemoteDevice;
import com.qg.smartprinter.localorder.device.WifiDevice;
import com.qg.smartprinter.localorder.event.Events;
import com.qg.smartprinter.util.SharedPreferencesUtils;
import com.qg.smartprinter.util.rxbus.RxBus;

/**
 * This fragment controls Wifi to communicate with other devices.
 */
public class WifiPrinterTestFragment extends PrinterTestFragment {
    private static final String TAG = "WifiPrinterFragment";

    private WifiManager mWifiManager = null;

    private boolean mIsSetup;

    public static WifiPrinterTestFragment newInstance() {
        return new WifiPrinterTestFragment();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Get local Wifi manager
        mWifiManager = (WifiManager) getContext().getSystemService(Context.WIFI_SERVICE);

        // If the adapter is null, then Wifi is not supported
        if (mWifiManager == null) {
            FragmentActivity activity = getActivity();
            Toast.makeText(activity, "Wifi is not available", Toast.LENGTH_LONG).show();
            activity.finish();
        }
    }

    public RemoteDevice getDevice() {
        return DevicesManager.getInstance().getTCPDevice();
    }

    @Override
    protected void connect() {
        String ssid = mWifiManager.getConnectionInfo().getSSID();
        String ip = SharedPreferencesUtils.getInstance().getServerIP();
        int port = SharedPreferencesUtils.getInstance().getServerPort();
        WifiDevice device = new WifiDevice(ssid, ip, port);
        RxBus.getDefault().post(new Events.ConnectEvent(device));
    }

}


package com.qg.smartprinter.localorder.wifi;

import android.content.Context;
import android.content.Intent;

import com.qg.smartprinter.localorder.PrinterTestActivity;
import com.qg.smartprinter.localorder.PrinterTestFragment;

public class WifiTestActivity extends PrinterTestActivity {

    public static void start(Context context) {
        Intent starter = new Intent(context, WifiTestActivity.class);
        context.startActivity(starter);
    }

    @Override
    protected PrinterTestFragment getPrinterTestFragment() {
        return WifiPrinterTestFragment.newInstance();
    }

}
package com.qg.smartprinter.localorder.wifi;

import android.content.Context;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.AuthAlgorithm;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.WifiManager;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;

import com.qg.smartprinter.localorder.wifi.AccessPoint.Security;

import static com.qg.smartprinter.localorder.wifi.AccessPoint.SECURITY_EAP;
import static com.qg.smartprinter.localorder.wifi.AccessPoint.SECURITY_NONE;
import static com.qg.smartprinter.localorder.wifi.AccessPoint.SECURITY_PSK;
import static com.qg.smartprinter.localorder.wifi.AccessPoint.SECURITY_WEP;
import static com.qg.smartprinter.localorder.wifi.AccessPoint.convertToQuotedString;
import static com.qg.smartprinter.localorder.wifi.AccessPoint.getSecurity;

/**
 * 用于处理Wi-fi扫描结果，连接Wi-fi
 */
public class WifiUtil {
    public static boolean needPassword(@NonNull ScanResult r) {
        return getSecurity(r) == SECURITY_NONE;
    }

    public static boolean needPassword(@Security int s) {
        return s == SECURITY_NONE;
    }

    public static boolean isSupport(@NonNull ScanResult r) {
        return getSecurity(r) != SECURITY_EAP;
    }

    public static boolean isSupport(@Security int s) {
        return s != SECURITY_EAP;
    }

    public static void connect(@NonNull Context context, @NonNull ScanResult r) {
        connect(context, r, null);
    }

    public static void connect(@NonNull Context context, @NonNull ScanResult r, @Nullable String password) {
        WifiConfiguration config = getConfig(r, password);
        WifiManager manager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        // Remember id
        int netId = manager.addNetwork(config);
        if (netId != -1) {
            // success
            manager.disconnect();
            manager.enableNetwork(netId, true);
            manager.reconnect();
        }
    }

    /**
     * 通过ScanResult和密码（可选）生成 WifiConfiguration
     *
     * @param r        扫描结果
     * @param password 密码
     * @return 对应的WifiConfiguration
     */
    public static WifiConfiguration getConfig(@NonNull ScanResult r, @Nullable String password) {
        WifiConfiguration config = new WifiConfiguration();

//        if (!AccessPoint.isSaved(r)) {
        config.SSID = convertToQuotedString(r.SSID);
//        } else {
//            config.networkId = AccessPoint.getNetworkId(r);
//        }

        switch (getSecurity(r)) {
            case SECURITY_NONE:
                config.allowedKeyManagement.set(KeyMgmt.NONE);
                break;

            case SECURITY_WEP:
                config.allowedKeyManagement.set(KeyMgmt.NONE);
                config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
                config.allowedAuthAlgorithms.set(AuthAlgorithm.SHARED);
                // 检查密码
                if (!TextUtils.isEmpty(password)) {
                    int length = password.length();
                    // WEP-40, WEP-104, and 256-bit WEP (WEP-232?)
                    if ((length == 10 || length == 26 || length == 58) &&
                            password.matches("[0-9A-Fa-f]*")) {
                        config.wepKeys[0] = password;
                    } else {
                        config.wepKeys[0] = convertToQuotedString(password);
                    }
                }
                break;

            case SECURITY_PSK:
                config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
                // 检查密码
                if (!TextUtils.isEmpty(password)) {
                    if (password.matches("[0-9A-Fa-f]{64}")) {
                        config.preSharedKey = password;
                    } else {
                        config.preSharedKey = convertToQuotedString(password);
                    }
                }
                break;

            default:
                return null;
        }
        return config;
    }
}
package com.qg.smartprinter.logic.model;

import java.io.Serializable;

/**
 * @author TZH
 * @version 1.0
 */
public class Business implements Serializable{
    private String name;
    private String address;
    private String phone;
    private String advertisement; // 广告语
    private byte[] picture; // 图片
    private String url; // URL -- 用于生成二维码

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getAdvertisement() {
        return advertisement;
    }

    public void setAdvertisement(String advertisement) {
        this.advertisement = advertisement;
    }

    public byte[] getPicture() {
        return picture;
    }

    public void setPicture(byte[] picture) {
        this.picture = picture;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }
}
package com.qg.smartprinter.logic.model;

import java.io.Serializable;

/**
 * Created by TZH on 2016/7/25.
 */
public class CookInView implements Serializable{
    public int picture;
    public String name;
    public String description;
    public int count;
    public int price;

    public CookInView(int picture, String name, int price) {
        this(picture, name, null, 0, price);
    }

    public CookInView(int picture, String name, String description, int count, int price) {
        this.picture = picture;
        this.name = name;
        this.description = description;
        this.count = count;
        this.price = price;
    }

}
package com.qg.smartprinter.logic.model;

import android.service.voice.AlwaysOnHotwordDetector;

import com.qg.smartprinter.util.DateUtils;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import static com.qg.smartprinter.util.TextUtil.nullable;

public class LocalOrder implements Serializable {

    public static final String SEPARATOR = "------------------\n";

    private long orderId; //订单编号
    private int tableNumber; // 桌号
    private Date orderTime; // 下单时间
    private ArrayList<OrderContent> contents; // 订单内容 -- 菜名、数量、小计
    private float discount; // 折扣
    private Business business; // 商家信息
    private String paymentMethod; // 支付方式

    private LocalOrder(Builder builder) {
        orderId = builder.orderId;
        business = builder.business;
        tableNumber = builder.tableNumber;
        orderTime = builder.orderTime;
        contents = builder.contents;
        discount = builder.discount;
        paymentMethod = builder.paymentMethod;
    }

    public long getOrderId() {
        return orderId;
    }

    private String format(String name, String count, String m, boolean head) {
        final int l1 = 20;
        final int l2 = 5;
        int length = name.length() * 2;

        int s1 = l1 - length;
        int s2 = head ? l2 - 2 : l2 + 1;

        StringBuilder sb = new StringBuilder();
        sb.append(name);
        space(sb, s1);
        sb.append(count);
        space(sb, s2);
        sb.append(m);
        return sb.toString();
    }

    private void space(StringBuilder sb, int length) {
        for (int i = 0; i < length; i++) {
            sb.append(" ");
        }
    }

    public String getPrintString() {
        StringBuilder buffer = new StringBuilder();
        buffer.append("(来自智能打印机APP端)\n")
                .append(SEPARATOR)
                .append("\n")
                .append("商家名称: ").append(nullable(business.getName())).append("\n")
                .append("商家地址: ").append(nullable(business.getAddress())).append("\n")
                .append("商家电话: ").append(nullable(business.getPhone())).append("\n")
                .append(SEPARATOR)
                .append("桌号：").append(tableNumber).append("\n")
                .append("订单编号: ").append(orderId).append("\n")
                .append("餐段：").append(getPeriod()).append("\n")
                .append("下单时间：").append(DateUtils.getDateString(orderTime)).append("\n")
                .append(SEPARATOR);

        buffer.append(format("菜单名", "数量", "小计", true))
                .append("\n");

        int sum = 0;
        for (OrderContent item : contents) {
            buffer.append(format(item.getDishes(), String.valueOf(item.getCount()), String.valueOf(item.getSubtotal()), false));
            buffer.append("\n");
            sum += item.getSubtotal();
        }
        sum -= discount;

        buffer.append(SEPARATOR)
                .append("优惠额: ").append(discount).append("\n")
                .append("合 计: ").append(sum).append("\n")
                .append(SEPARATOR)
                .append("支付方式：").append(nullable(paymentMethod)).append("\n")
                .append(SEPARATOR)
                .append(business.getAdvertisement());

        return buffer.toString();
    }

    private String getPeriod() {
        int hour = DateUtils.getCalendar(orderTime).get(Calendar.HOUR_OF_DAY);
        if (hour < 3 || hour > 22) {
            return "宵夜";
        } else if (hour < 10) {
            return "早餐";
        } else if (hour < 16) {
            return "午餐";
        } else if (hour <= 22) {
            return "晚餐";
        } else {
            return "";
        }
    }

    public static final class Builder {
        private int orderId;
        private Business business;
        private int tableNumber;
        private Date orderTime;
        private ArrayList<OrderContent> contents;
        private float discount;
        private String paymentMethod;

        public Builder() {
            // Default values.
            business = new Business();
            business.setName("");
            business.setAddress("");
            business.setPhone("");
            business.setAdvertisement("");
            orderTime = new Date();
            contents = new ArrayList<>();
            paymentMethod = "";
        }

        public Builder orderId(int val) {
            orderId = val;
            return this;
        }

        public Builder business(Business val) {
            business = val;
            return this;
        }

        public Builder tableNumber(int val) {
            tableNumber = val;
            return this;
        }

        public Builder orderTime(Date val) {
            orderTime = val;
            return this;
        }

        public Builder contents(ArrayList<OrderContent> val) {
            contents = val;
            return this;
        }

        public Builder discount(float val) {
            discount = val;
            return this;
        }

        public Builder paymentMethod(String val) {
            paymentMethod = val;
            return this;
        }

        public LocalOrder build() {
            if (orderId == 0) throw new IllegalStateException("orderId == 0");
            return new LocalOrder(this);
        }
    }

}
package com.qg.smartprinter.logic.model;

import java.io.Serializable;

/**
 * 订单内容
 */
public class OrderContent implements Serializable {
    private String dishes;
    private int count;
    private int subtotal;

    public OrderContent(String dishes, int count, int subtotal) {
        this.dishes = dishes;
        this.count = count;
        this.subtotal = subtotal;
    }

    public String getDishes() {
        return dishes;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public int getSubtotal() {
        return subtotal;
    }

    @Override
    public String toString() {
        return dishes + TAB1 + count + TAB2 + subtotal;
    }

    public static final String TAB1 = "       ";
    public static final String TAB2 = "       ";
}
package com.qg.smartprinter.logic.model;

import com.qg.deprecated.logic.model.Printer;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * Created by 攀登 on 2016/7/25.
 */
public class User implements Serializable{

    private String userId; // 用户id
    private String userName; // 店主名字
    private String userAccount; // 账户
    private String userPassword; // 密码
    private Integer userPrinters;
    private String userLogo;
    private String userQrcode;
    private String userStore; // 商店名
    private String userAddress; // 商家地址
    private String userPhone; // 商家电话
    private ArrayList<Printer> printers;
    private ArrayList<Integer> printerId;

    public User(String id) {
        this.userId = id;
    }

    public User(String name, String account, String password, String store, String address, String phone, ArrayList<Integer> printerId) {
        this.userName = name;
        this.userAccount = account;
        this.userPassword = password;
        this.userStore = store;
        this.userAddress = address;
        this.userPhone = phone;
        this.printerId = printerId;
    }

    public String getId() {
        return userId;
    }

    public void setId(String id) {
        this.userId = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserAccount() {
        return userAccount;
    }

    public void setUserAccount(String userAccount) {
        this.userAccount = userAccount;
    }

    public String getUserPassword() {
        return userPassword;
    }

    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }

    public Integer getUserPrinters() {
        return userPrinters;
    }

    public void setUserPrinters(Integer userPrinters) {
        this.userPrinters = userPrinters;
    }

    public String getUserLogo() {
        return userLogo;
    }

    public void setUserLogo(String userLogo) {
        this.userLogo = userLogo;
    }

    public String getUserQrcode() {
        return userQrcode;
    }

    public void setUserQrcode(String userQrcode) {
        this.userQrcode = userQrcode;
    }

    public String getUserStore() {
        return userStore;
    }

    public void setUserStore(String userStore) {
        this.userStore = userStore;
    }

    public String getUserAddress() {
        return userAddress;
    }

    public void setUserAddress(String userAddress) {
        this.userAddress = userAddress;
    }

    public String getUserPhone() {
        return userPhone;
    }

    public void setUserPhone(String userPhone) {
        this.userPhone = userPhone;
    }

    public ArrayList<Printer> getPrinters() {
        return printers;
    }

    public void setPrinters(ArrayList<Printer> printers) {
        this.printers = printers;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        } else if (o instanceof User) {
            User user = (User) o;
            return userPhone.equals(user.getUserPhone());
        }
        return false;
    }

    @Override
    public String toString() {
        return "userId->" + userId + ";" + "userName->" + userName + ";" + "userPhone->" + userPhone + ";";
    }

    public ArrayList<Integer> getPrinterId() {
        return printerId;
    }

    public void setPrinterId(ArrayList<Integer> printerId) {
        this.printerId = printerId;
    }
}package com.qg.smartprinter.ui;

import android.os.Bundle;
import android.os.PersistableBundle;
import android.support.annotation.Nullable;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.AppCompatActivity;
import android.view.View;

import com.qg.common.caughtexception.ExceptionHandler;
import com.qg.common.logger.FileLogNode;
import com.qg.common.logger.Linkable;
import com.qg.common.logger.Log;
import com.qg.common.logger.LogWrapper;
import com.qg.smartprinter.R;
import com.qg.smartprinter.ui.dialog.MyLoadingDialog;

public class BaseActivity extends AppCompatActivity implements View.OnClickListener {
    private static final String TAG = "BaseActivity";

    private static final String DIALOG = "dialog";
    private static final boolean WRITE_TO_FILE = true;
    protected FragmentManager mFragmentManager = getSupportFragmentManager();

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Thread.UncaughtExceptionHandler defaultHandler = Thread.getDefaultUncaughtExceptionHandler();
        Thread.setDefaultUncaughtExceptionHandler(new ExceptionHandler(defaultHandler, getApplicationContext()));
        Log.d(TAG, "onCreate: setDefaultUn");
    }

    @Override
    protected void onStart() {
        super.onStart();
        initializeLogging();
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        initializeLogging();
    }

    /**
     * Set up targets to receive log data
     *
     * @return The last node of the log list.
     */
    public Linkable initializeLogging() {
        Linkable tail;
        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.
        // Wraps Android's native log framework
        LogWrapper logWrapper = new LogWrapper();
        tail = (Linkable) Log.setLogNode(logWrapper);

        if (WRITE_TO_FILE) {
            FileLogNode fileLogNode = new FileLogNode();
            tail = (Linkable) tail.setNext(fileLogNode);
        }
        Log.i(TAG, "Ready");
        return tail;
    }

    @Override
    public void onClick(View v) {
    }

    public void showLoadingDialog() {
        showLoadingDialog(getString(R.string.loading));
    }

    public void showLoadingDialog(String msg) {
        FragmentTransaction ft = mFragmentManager.beginTransaction();

        dismissMyDialog();

        DialogFragment dialog = MyLoadingDialog.newInstance(msg);
        dialog.show(ft, DIALOG);
    }

    public void dismissMyDialog() {
        Fragment prev = mFragmentManager.findFragmentByTag(DIALOG);
        if (prev != null) {
            DialogFragment df = (DialogFragment) prev;
            df.dismiss();
        }
    }
}
package com.qg.smartprinter.ui;

import android.support.v4.app.Fragment;

public class BaseFragment extends Fragment {
}
package com.qg.smartprinter.ui;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.qg.smartprinter.R;
import com.qg.smartprinter.ui.cookbook.CookbookActivity;
import com.qg.smartprinter.localorder.status.localstatus.LocalStatusActivity;
import com.qg.smartprinter.util.SharedPreferencesUtils;
import com.squareup.picasso.Picasso;

/**
 * 商家信息
 */
public class BusinessInfoActivity extends BaseActivity {

    private TextView mAdvertisementView;
    private TextView mQRCodeTextView;
    private TextView mNameView;
    private TextView mPhoneView;
    private TextView mAddressView;
    private ImageView mLogoView;

    public static void start(Context context) {
        Intent starter = new Intent(context, BusinessInfoActivity.class);
        context.startActivity(starter);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_business_info);
        setupToolbar();
        setupView();
    }

    @Override
    protected void onResume() {
        super.onResume();
        updateView();
    }

    private void setupToolbar() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
    }

    private void setupView() {
        mLogoView = (ImageView) findViewById(R.id.logo);
        mQRCodeTextView = (TextView) findViewById(R.id.qr_code_text);
        mAdvertisementView = (TextView) findViewById(R.id.advertisement);
        mNameView = (TextView) findViewById(R.id.store_name);
        mAddressView = (TextView) findViewById(R.id.store_address);
        mPhoneView = (TextView) findViewById(R.id.store_phone);

        findViewById(R.id.order).setOnClickListener(this);
    }

    private void updateView() {
        SharedPreferencesUtils su = SharedPreferencesUtils.getInstance();
        String uri = su.getString(SharedPreferencesUtils.BUSINESS_LOGO_URI, "");
        if (!TextUtils.isEmpty(uri)) {
            Picasso.with(this)
                    .load(uri)
                    .into(mLogoView);
        }
        mNameView.setText(su.getString(SharedPreferencesUtils.BUSINESS_NAME, ""));
        mAddressView.setText(su.getString(SharedPreferencesUtils.BUSINESS_ADDRESS, ""));
        mPhoneView.setText(su.getString(SharedPreferencesUtils.BUSINESS_PHONE, ""));
        mAdvertisementView.setText(su.getString(SharedPreferencesUtils.BUSINESS_AD, ""));
        mQRCodeTextView.setText(su.getString(SharedPreferencesUtils.BUSINESS_QR_CODE, ""));
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_business_info, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.edit:
                EditBusinessInfoActivity.start(this);
                return true;
            case R.id.status:
                LocalStatusActivity.start(this);
                return true;
        }
        return false;
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.order:
                CookbookActivity.start(this);
                break;
        }
    }
}
package com.qg.smartprinter.ui.cookbook;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.qg.smartprinter.R;
import com.qg.smartprinter.dummy.CookbookDummy;
import com.qg.smartprinter.localorder.OrderManager;
import com.qg.smartprinter.logic.model.Business;
import com.qg.smartprinter.logic.model.CookInView;
import com.qg.smartprinter.logic.model.LocalOrder;
import com.qg.smartprinter.logic.model.OrderContent;
import com.qg.smartprinter.ui.BaseActivity;
import com.qg.smartprinter.ui.LocalPrintPreviewActivity;
import com.qg.smartprinter.util.SharedPreferencesUtils;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;

public class CookbookActivity extends BaseActivity implements View.OnClickListener, MDialogFragment.MDialogFragmentListener {
    private RecyclerView.Adapter mAdapter;
    private ArrayList<CookInView> mCooks = new ArrayList<>();
    private LinkedList<CookInView> mOrderCooks = new LinkedList<>();
    private TextView mNumberTextView;

    public static void start(Context context) {
        Intent starter = new Intent(context, CookbookActivity.class);
        context.startActivity(starter);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cookbook);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mNumberTextView = (TextView) findViewById(R.id.num);
        mNumberTextView.setText(String.valueOf(getSumCount()));
        ImageView shoppingCar = (ImageView) findViewById(R.id.shopping_car);
        shoppingCar.setOnClickListener(this);

        // TODO: 2016/8/7 将测试数据变为真实可编辑的数据
        mCooks.addAll(CookbookDummy.newCooks());
        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.list);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(mAdapter = new Adapter());

        View done = findViewById(R.id.fab);
        done.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                confirmOrder();
            }
        });
    }

    private void confirmOrder() {
//            // TODO: 2016/10/21 加上桌号填写
//            order.setTableNumber(5);
        ArrayList<OrderContent> orderContents = new ArrayList<>();
        for (int i = 0; i < mOrderCooks.size(); i++) {
            CookInView cookInView = mOrderCooks.get(i);
            OrderContent oc = new OrderContent(
                    cookInView.name,
                    cookInView.count,
                    cookInView.count * cookInView.price
            );
            orderContents.add(oc);
        }

        SharedPreferencesUtils su = SharedPreferencesUtils.getInstance();
        Business business = new Business();
        business.setName(su.getString(SharedPreferencesUtils.BUSINESS_NAME, ""));
        business.setPhone(su.getString(SharedPreferencesUtils.BUSINESS_PHONE, ""));
        business.setAddress(su.getString(SharedPreferencesUtils.BUSINESS_ADDRESS, ""));
        business.setAdvertisement(su.getString(SharedPreferencesUtils.BUSINESS_AD, ""));

        LocalOrder order = new LocalOrder.Builder()
                .orderId(OrderManager.getInstance().getNextOrderNumber())
                .contents(orderContents)
                .business(business)
                .build();

        LocalPrintPreviewActivity.start(this, order);
    }

    private int getSumCount() {
        int sum = 0;
        for (CookInView c : mOrderCooks) {
            sum += c.count;
        }
        return sum;
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.shopping_car:
                showShoppingDialog();
                break;
        }
    }

    public void showShoppingDialog() {
        FragmentManager fm = getSupportFragmentManager();
        MDialogFragment dialog = MDialogFragment.newInstance(mOrderCooks);
        dialog.show(fm, "shopping_car");
    }

    private class ViewHolder extends RecyclerView.ViewHolder {
        TextView mNameTextView;
        TextView mDescriptionTextView;
        ImageView mPictureImageView;
        TextView mPriceTextView;
        TextView mCountTextView;
        View mSubButton;
        View mAddButton;

        ViewHolder(View itemView) {
            super(itemView);
            mNameTextView = (TextView) itemView.findViewById(R.id.name);
            mDescriptionTextView = (TextView) itemView.findViewById(R.id.description);
            mPictureImageView = (ImageView) itemView.findViewById(R.id.picture);
            mPriceTextView = (TextView) itemView.findViewById(R.id.price);
            mCountTextView = (TextView) itemView.findViewById(R.id.count);
            mSubButton = itemView.findViewById(R.id.sub_btn);
            mAddButton = itemView.findViewById(R.id.add_btn);
            mSubButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int position = getAdapterPosition();
                    CookInView cook = mCooks.get(position);
                    cook.count--;
                    updateCount();
                    if (cook.count <= 0) {
                        mOrderCooks.remove(cook);
                    }
                }
            });
            mAddButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int position = getAdapterPosition();
                    CookInView cook = mCooks.get(position);
                    cook.count++;
                    if (!mOrderCooks.contains(cook)) {
                        mOrderCooks.add(cook);
                    }
                    updateCount();
                }
            });
        }

        void updateCount() {
            int count = mCooks.get(getAdapterPosition()).count;
            boolean hasCount = count > 0;
            mCountTextView.setText(String.valueOf(count));
            mNumberTextView.setText(String.valueOf(getSumCount()));
            mSubButton.setVisibility(hasCount ? View.VISIBLE : View.GONE);
            mCountTextView.setVisibility(hasCount ? View.VISIBLE : View.GONE);
        }
    }

    private class Adapter extends RecyclerView.Adapter<ViewHolder> {

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new ViewHolder(getLayoutInflater().inflate(R.layout.item_cookbook, parent, false));
        }

        @Override
        public void onBindViewHolder(ViewHolder holder, int position) {
            CookInView cook = mCooks.get(position);
            holder.mNameTextView.setText(cook.name);
            holder.mDescriptionTextView.setText(cook.description);
            holder.mPriceTextView.setText(String.format(Locale.CHINA, "¥%d", cook.price));
            holder.updateCount();
            Picasso.with(CookbookActivity.this)
                    .load(cook.picture)
                    .placeholder(R.drawable.ic_photo_black_48dp)
                    .into(holder.mPictureImageView);
        }

        @Override
        public int getItemCount() {
            return mCooks.size();
        }

    }

    @Override
    public void onFinishEditDialog(LinkedList<CookInView> mCook, int requestCode) {
        mAdapter.notifyDataSetChanged();
        if (requestCode == 1) { // 打印
            confirmOrder();
        } else if (requestCode == 2) {
            mOrderCooks.clear();
        }
    }

    private final static int REQUEST_CODE = 1;

    private void clearCart() {
        for (CookInView c : mCooks) {
            c.count = 0;
        }
        mAdapter.notifyDataSetChanged();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode != RESULT_OK)
            return;
        switch (requestCode) {
            case REQUEST_CODE:
                clearCart();
                break;
            default:
                break;
        }
    }
}
package com.qg.smartprinter.ui.cookbook;

import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.DisplayMetrics;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageButton;
import android.widget.TextView;
import android.support.v4.app.DialogFragment;

import com.qg.smartprinter.R;
import com.qg.smartprinter.logic.model.CookInView;

import java.util.LinkedList;

/**
 * Created by 攀登 on 2016/7/31.
 */
public class MDialogFragment extends DialogFragment implements View.OnClickListener {

    private static final String TAG = "DatePickDialogFragment";
    public static final String ARGS_COOK = "cook";
    private LinkedList<CookInView> mCook;
    private LinkedList<CookInView> m = new LinkedList<>();
    private ShoppingCarAdapter adapter;
    private TextView sumPrice;

    public interface MDialogFragmentListener {
        void onFinishEditDialog(LinkedList<CookInView> mCook, int REQUEST);
    }

    public MDialogFragment() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStyle(DialogFragment.STYLE_NO_FRAME,
                android.R.style.Theme_Holo_Light);
        mCook = (LinkedList<CookInView>) getArguments().getSerializable(ARGS_COOK);
    }

    public static MDialogFragment newInstance(LinkedList<CookInView> cook) {

        Bundle args = new Bundle();
        args.putSerializable(ARGS_COOK, cook);

        MDialogFragment fragment = new MDialogFragment();
        fragment.setArguments(args);
        return fragment;
    }

    RecyclerView mListView;

    private int getSumPrice() {
        int sum = 0;
        for(CookInView c : mCook) {
            sum += c.count * c.price;
        }
        return sum;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.shopping_dialog, container, false);

        mListView = (RecyclerView) view.findViewById(R.id.recyclerView);
        mListView.setLayoutManager(new LinearLayoutManager(getActivity()));
        sumPrice = (TextView) view.findViewById(R.id.price);
        sumPrice.setText(String.valueOf(getSumPrice()));
        adapter = new ShoppingCarAdapter();
        mListView.setAdapter(adapter);

        view.findViewById(R.id.empty_car).setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // 删除所有的car
                for(CookInView c : mCook) {
                    c.count = 0;
                }
                MDialogFragmentListener mListener = (MDialogFragmentListener) getActivity();
                mListener.onFinishEditDialog(mCook, 2);
                getDialog().dismiss();
            }

        });
        view.findViewById(R.id.sure).setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // 确定打印
                MDialogFragmentListener mListener = (MDialogFragmentListener) getActivity();
                mListener.onFinishEditDialog(mCook, 1);
                getDialog().dismiss();
            }

        });
        view.findViewById(R.id.cancle).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 取消
                MDialogFragmentListener mListener = (MDialogFragmentListener) getActivity();
                mListener.onFinishEditDialog(mCook, 0);
                getDialog().dismiss();
            }
        });
        return view;
    }

    @Override
    public void onStart() {
        super.onStart();
        Window win = getDialog().getWindow();
        // 一定要设置Background，如果不设置，window属性设置无效
        win.setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.white)));

        DisplayMetrics dm = new DisplayMetrics();
        getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);

        WindowManager.LayoutParams params = win.getAttributes();
        params.gravity = Gravity.BOTTOM;
        // 使用ViewGroup.LayoutParams，以便Dialog 宽度充满整个屏幕
        params.width = ViewGroup.LayoutParams.MATCH_PARENT;
        params.height = ViewGroup.LayoutParams.WRAP_CONTENT;
        win.setAttributes(params);
    }

    @Override
    public void onClick(View v) {

    }

    private class ShoppingCarAdapter extends RecyclerView.Adapter<ViewHolder> {

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            ViewHolder viewHolder = new ViewHolder(getActivity().getLayoutInflater().inflate(R.layout.item_shoppingcar, parent, false));
            return viewHolder;
        }

        @Override
        public void onBindViewHolder(ViewHolder holder, int position) {
            CookInView cook = mCook.get(position);
            holder.name.setText(cook.name);
            holder.updateCount();
        }

        @Override
        public int getItemCount() {
            return mCook.size();
        }
    }

    private class ViewHolder extends RecyclerView.ViewHolder {
        TextView name, price, count;
        ImageButton sub, add;

        public ViewHolder(View itemView) {
            super(itemView);
            name = (TextView) itemView.findViewById(R.id.name);
            price = (TextView) itemView.findViewById(R.id.price);
            sub = (ImageButton) itemView.findViewById(R.id.sub_btn);
            count = (TextView) itemView.findViewById(R.id.count);
            add = (ImageButton) itemView.findViewById(R.id.add_btn);

            sub.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int position = getAdapterPosition();
                    CookInView cook = mCook.get(position);
                    cook.count--;
                    updateCount();
                    if (cook.count <= 0) {
                        mCook.remove(cook);
                        adapter.notifyDataSetChanged();

                    }
                }
            });
            add.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int position = getAdapterPosition();
                    CookInView cook = mCook.get(position);
                    cook.count++;
                    updateCount();
                    if (!mCook.contains(cook)) {
                        mCook.add(cook);
                    }
                }
            });
        }

        void updateCount() {
            int c = mCook.get(getAdapterPosition()).count;
            boolean hasCount = c > 0;
            sumPrice.setText("¥" + String.valueOf(getSumPrice()));
            price.setText("¥" + String.valueOf(c * mCook.get(getAdapterPosition()).price));
            count.setText(String.valueOf(c));
        }
    }
}
package com.qg.smartprinter.ui.dialog;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;

/**
 * Created by 攀登 on 2016/8/1.
 */
public class MyLoadingDialog extends DialogFragment {
    private String mMessage;

    public static MyLoadingDialog newInstance(String msg) {
        MyLoadingDialog dialog = new MyLoadingDialog();
        Bundle args = new Bundle();
        args.putString("msg", msg);
        dialog.setArguments(args);
        return dialog;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mMessage = getArguments().getString("msg");
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        ProgressDialog dialog = new ProgressDialog(getActivity());
        dialog.setIndeterminate(true);
        dialog.setMessage(mMessage);
        return dialog;
    }
}
